<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\RVMDK\M5311-V3.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\RVMDK\M5311-V3.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050106: Last Updated: Mon Mar 09 15:38:18 2020
<BR><P>
<H3>Maximum Stack Usage =       2292 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
task_Net &rArr; M5311_Send_alarm &rArr; M5311_UDPSend_ALARMData &rArr; M5311_UDPSend_InfData_ALARM &rArr; send_UDP_msg &rArr; M5311_send_cmd &rArr; M5311_check_ack &rArr; strstr
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_IRQHandler</a><BR>
 <LI><a href="#[38]">rt_alloc_box</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[38]">rt_alloc_box</a><BR>
 <LI><a href="#[d6]">Show_Menu_List</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d6]">Show_Menu_List</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32l1xx_it.o(i.BusFault_Handler) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[20]">COMP_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[66]">Clear_Alarm_Inf</a> from menu.o(i.Clear_Alarm_Inf) referenced from menu.o(.constdata)
 <LI><a href="#[5d]">Close_T_Start</a> from menu.o(i.Close_T_Start) referenced from menu.o(.constdata)
 <LI><a href="#[4e]">Close_Upload_Start</a> from menu.o(i.Close_Upload_Start) referenced from menu.o(.constdata)
 <LI><a href="#[60]">Close_Water_Level_Start</a> from menu.o(i.Close_Water_Level_Start) referenced from menu.o(.constdata)
 <LI><a href="#[1f]">DAC_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from drive.o(i.DMA1_Channel1_IRQHandler) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32l1xx_it.o(i.DebugMon_Handler) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[54]">Del_Move_Mode_Number</a> from menu.o(i.Del_Move_Mode_Number) referenced from menu.o(.constdata)
 <LI><a href="#[5a]">Del_Smoke_Mode_Number</a> from menu.o(i.Del_Smoke_Mode_Number) referenced from menu.o(.constdata)
 <LI><a href="#[51]">Del_Temp_Mode_Number</a> from menu.o(i.Del_Temp_Mode_Number) referenced from menu.o(.constdata)
 <LI><a href="#[57]">Del_Water_Mode_Number</a> from menu.o(i.Del_Water_Mode_Number) referenced from menu.o(.constdata)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from stm32l1xx_it.o(i.EXTI0_IRQHandler) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from stm32l1xx_it.o(i.EXTI1_IRQHandler) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from stm32l1xx_it.o(i.EXTI2_IRQHandler) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from stm32l1xx_it.o(i.EXTI9_5_IRQHandler) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32l1xx_it.o(i.HardFault_Handler) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[22]">LCD_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32l1xx_it.o(i.MemManage_Handler) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[4f]">NB_Status</a> from menu.o(i.NB_Status) referenced from menu.o(.constdata)
 <LI><a href="#[1]">NMI_Handler</a> from stm32l1xx_it.o(i.NMI_Handler) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[5c]">Open_T_Start</a> from menu.o(i.Open_T_Start) referenced from menu.o(.constdata)
 <LI><a href="#[4d]">Open_Upload_Start</a> from menu.o(i.Open_Upload_Start) referenced from menu.o(.constdata)
 <LI><a href="#[5f]">Open_Water_Level_Start</a> from menu.o(i.Open_Water_Level_Start) referenced from menu.o(.constdata)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from hal_cm3.o(.emb_text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[6a]">Query_online_device</a> from menu.o(i.Query_online_device) referenced from menu.o(.constdata)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from stm32l1xx_it.o(i.RTC_Alarm_IRQHandler) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[d]">RTC_WKUP_IRQHandler</a> from stm32l1xx_it.o(i.RTC_WKUP_IRQHandler) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[55]">Read_Move_Mode_Number</a> from menu.o(i.Read_Move_Mode_Number) referenced from menu.o(.constdata)
 <LI><a href="#[5b]">Read_Smoke_Mode_Number</a> from menu.o(i.Read_Smoke_Mode_Number) referenced from menu.o(.constdata)
 <LI><a href="#[52]">Read_Temp_Mode_Number</a> from menu.o(i.Read_Temp_Mode_Number) referenced from menu.o(.constdata)
 <LI><a href="#[58]">Read_Water_Mode_Number</a> from menu.o(i.Read_Water_Mode_Number) referenced from menu.o(.constdata)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from hal_cm3.o(.emb_text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[62]">Server_Inf_Set</a> from menu.o(i.Server_Inf_Set) referenced from menu.o(.constdata)
 <LI><a href="#[61]">Server_Inf_Show</a> from menu.o(i.Server_Inf_Show) referenced from menu.o(.constdata)
 <LI><a href="#[67]">Set_Interval</a> from menu.o(i.Set_Interval) referenced from menu.o(.constdata)
 <LI><a href="#[53]">Set_Move_Mode_Number</a> from menu.o(i.Set_Move_Mode_Number) referenced from menu.o(.constdata)
 <LI><a href="#[65]">Set_Number</a> from menu.o(i.Set_Number) referenced from menu.o(.constdata)
 <LI><a href="#[64]">Set_RFChannelForLinkMove</a> from menu.o(i.Set_RFChannelForLinkMove) referenced from menu.o(.constdata)
 <LI><a href="#[63]">Set_RFChannelForLinkTemp</a> from menu.o(i.Set_RFChannelForLinkTemp) referenced from menu.o(.constdata)
 <LI><a href="#[68]">Set_Sample_Interval</a> from menu.o(i.Set_Sample_Interval) referenced from menu.o(.constdata)
 <LI><a href="#[6b]">Set_Sensitivity</a> from menu.o(i.Set_Sensitivity) referenced from menu.o(.constdata)
 <LI><a href="#[59]">Set_Smoke_Mode_Number</a> from menu.o(i.Set_Smoke_Mode_Number) referenced from menu.o(.constdata)
 <LI><a href="#[5e]">Set_T_Interval</a> from menu.o(i.Set_T_Interval) referenced from menu.o(.constdata)
 <LI><a href="#[50]">Set_Temp_Mode_Number</a> from menu.o(i.Set_Temp_Mode_Number) referenced from menu.o(.constdata)
 <LI><a href="#[4b]">Set_TestNum</a> from menu.o(i.Set_TestNum) referenced from menu.o(.constdata)
 <LI><a href="#[56]">Set_Water_Mode_Number</a> from menu.o(i.Set_Water_Mode_Number) referenced from menu.o(.constdata)
 <LI><a href="#[6c]">ShowVersion</a> from menu.o(i.ShowVersion) referenced from menu.o(.constdata)
 <LI><a href="#[9]">SysTick_Handler</a> from hal_cm3.o(.emb_text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[3a]">SystemInit</a> from system_stm32l1xx.o(i.SystemInit) referenced from startup_stm32l1xx_md.o(.text)
 <LI><a href="#[69]">System_Inf_State</a> from menu.o(i.System_Inf_State) referenced from menu.o(.constdata)
 <LI><a href="#[c]">TAMPER_STAMP_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[24]">TIM10_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[25]">TIM11_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from stm32l1xx_it.o(i.TIM2_IRQHandler) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from drive.o(i.TIM3_IRQHandler) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[35]">TIM6_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[36]">TIM7_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[23]">TIM9_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[4c]">Test_Status</a> from menu.o(i.Test_Status) referenced from menu.o(.constdata)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from stm32l1xx_it.o(i.USART2_IRQHandler) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from stm32l1xx_it.o(i.USART3_IRQHandler) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[34]">USB_FS_WKUP_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[1d]">USB_HP_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[1e]">USB_LP_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[6d]">UpLoadApp</a> from menu.o(i.UpLoadApp) referenced from menu.o(.constdata)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32l1xx_it.o(i.UsageFault_Handler) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[3b]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32l1xx_md.o(.text)
 <LI><a href="#[3f]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[37]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[44]">os_idle_demon</a> from rtx_conf_cm.o(i.os_idle_demon) referenced from rt_task.o(i.rt_sys_init)
 <LI><a href="#[38]">rt_alloc_box</a> from rt_membox.o(i.rt_alloc_box) referenced from hal_cm3.o(.emb_text)
 <LI><a href="#[3e]">rt_dly_wait</a> from rt_time.o(i.rt_dly_wait) referenced from m5311.o(i.Get_M5311Inf)
 <LI><a href="#[3e]">rt_dly_wait</a> from rt_time.o(i.rt_dly_wait) referenced from m5311.o(i.M5311_FailurePowerOn)
 <LI><a href="#[3e]">rt_dly_wait</a> from rt_time.o(i.rt_dly_wait) referenced from m5311.o(i.M5311_InitNetWork)
 <LI><a href="#[3e]">rt_dly_wait</a> from rt_time.o(i.rt_dly_wait) referenced from m5311.o(i.M5311_InitPowerOn)
 <LI><a href="#[3e]">rt_dly_wait</a> from rt_time.o(i.rt_dly_wait) referenced from m5311.o(i.M5311_PowerOn)
 <LI><a href="#[3e]">rt_dly_wait</a> from rt_time.o(i.rt_dly_wait) referenced from m5311.o(i.M5311_UDPSend_ALARMData)
 <LI><a href="#[3e]">rt_dly_wait</a> from rt_time.o(i.rt_dly_wait) referenced from m5311.o(i.M5311_UDPSend_InfData)
 <LI><a href="#[3e]">rt_dly_wait</a> from rt_time.o(i.rt_dly_wait) referenced from m5311.o(i.M5311_UDPSend_InfData_ALARM)
 <LI><a href="#[3e]">rt_dly_wait</a> from rt_time.o(i.rt_dly_wait) referenced from m5311.o(i.M5311_WakeUpPowerOn)
 <LI><a href="#[3e]">rt_dly_wait</a> from rt_time.o(i.rt_dly_wait) referenced from m5311.o(i.M5311_send_cmd)
 <LI><a href="#[3e]">rt_dly_wait</a> from rt_time.o(i.rt_dly_wait) referenced from led_drive.o(i.OLED_Init)
 <LI><a href="#[3e]">rt_dly_wait</a> from rt_time.o(i.rt_dly_wait) referenced from m5311.o(i.ResetM5311)
 <LI><a href="#[3e]">rt_dly_wait</a> from rt_time.o(i.rt_dly_wait) referenced from m5311.o(i.Set_M5311_Power)
 <LI><a href="#[3e]">rt_dly_wait</a> from rt_time.o(i.rt_dly_wait) referenced from menu.o(i.Set_Number)
 <LI><a href="#[3e]">rt_dly_wait</a> from rt_time.o(i.rt_dly_wait) referenced from menu.o(i.Set_RFChannelForLinkMove)
 <LI><a href="#[3e]">rt_dly_wait</a> from rt_time.o(i.rt_dly_wait) referenced from menu.o(i.Set_RFChannelForLinkTemp)
 <LI><a href="#[3e]">rt_dly_wait</a> from rt_time.o(i.rt_dly_wait) referenced from menu.o(i.System_Inf_State)
 <LI><a href="#[3e]">rt_dly_wait</a> from rt_time.o(i.rt_dly_wait) referenced from main.o(i.task_Net)
 <LI><a href="#[3e]">rt_dly_wait</a> from rt_time.o(i.rt_dly_wait) referenced from main.o(i.task_RfReadSensor)
 <LI><a href="#[3d]">rt_evt_get</a> from rt_event.o(i.rt_evt_get) referenced from menu.o(i.Clear_Alarm_Inf)
 <LI><a href="#[3d]">rt_evt_get</a> from rt_event.o(i.rt_evt_get) referenced from menu.o(i.Del_Move_Mode_Number)
 <LI><a href="#[3d]">rt_evt_get</a> from rt_event.o(i.rt_evt_get) referenced from menu.o(i.Del_Smoke_Mode_Number)
 <LI><a href="#[3d]">rt_evt_get</a> from rt_event.o(i.rt_evt_get) referenced from menu.o(i.Del_Temp_Mode_Number)
 <LI><a href="#[3d]">rt_evt_get</a> from rt_event.o(i.rt_evt_get) referenced from menu.o(i.Del_Water_Mode_Number)
 <LI><a href="#[3d]">rt_evt_get</a> from rt_event.o(i.rt_evt_get) referenced from display.o(i.Display_Main_View)
 <LI><a href="#[3d]">rt_evt_get</a> from rt_event.o(i.rt_evt_get) referenced from menu.o(i.NB_Status)
 <LI><a href="#[3d]">rt_evt_get</a> from rt_event.o(i.rt_evt_get) referenced from menu.o(i.Query_online_device)
 <LI><a href="#[3d]">rt_evt_get</a> from rt_event.o(i.rt_evt_get) referenced from menu.o(i.Read_Move_Mode_Number)
 <LI><a href="#[3d]">rt_evt_get</a> from rt_event.o(i.rt_evt_get) referenced from menu.o(i.Read_Smoke_Mode_Number)
 <LI><a href="#[3d]">rt_evt_get</a> from rt_event.o(i.rt_evt_get) referenced from menu.o(i.Read_Temp_Mode_Number)
 <LI><a href="#[3d]">rt_evt_get</a> from rt_event.o(i.rt_evt_get) referenced from menu.o(i.Read_Water_Mode_Number)
 <LI><a href="#[3d]">rt_evt_get</a> from rt_event.o(i.rt_evt_get) referenced from menu.o(i.Server_Inf_Set)
 <LI><a href="#[3d]">rt_evt_get</a> from rt_event.o(i.rt_evt_get) referenced from menu.o(i.Server_Inf_Show)
 <LI><a href="#[3d]">rt_evt_get</a> from rt_event.o(i.rt_evt_get) referenced from menu.o(i.Set_Interval)
 <LI><a href="#[3d]">rt_evt_get</a> from rt_event.o(i.rt_evt_get) referenced from menu.o(i.Set_Move_Mode_Number)
 <LI><a href="#[3d]">rt_evt_get</a> from rt_event.o(i.rt_evt_get) referenced from menu.o(i.Set_Number)
 <LI><a href="#[3d]">rt_evt_get</a> from rt_event.o(i.rt_evt_get) referenced from menu.o(i.Set_RFChannelForLinkMove)
 <LI><a href="#[3d]">rt_evt_get</a> from rt_event.o(i.rt_evt_get) referenced from menu.o(i.Set_RFChannelForLinkTemp)
 <LI><a href="#[3d]">rt_evt_get</a> from rt_event.o(i.rt_evt_get) referenced from menu.o(i.Set_Sample_Interval)
 <LI><a href="#[3d]">rt_evt_get</a> from rt_event.o(i.rt_evt_get) referenced from menu.o(i.Set_Sensitivity)
 <LI><a href="#[3d]">rt_evt_get</a> from rt_event.o(i.rt_evt_get) referenced from menu.o(i.Set_Smoke_Mode_Number)
 <LI><a href="#[3d]">rt_evt_get</a> from rt_event.o(i.rt_evt_get) referenced from menu.o(i.Set_T_Interval)
 <LI><a href="#[3d]">rt_evt_get</a> from rt_event.o(i.rt_evt_get) referenced from menu.o(i.Set_Temp_Mode_Number)
 <LI><a href="#[3d]">rt_evt_get</a> from rt_event.o(i.rt_evt_get) referenced from menu.o(i.Set_TestNum)
 <LI><a href="#[3d]">rt_evt_get</a> from rt_event.o(i.rt_evt_get) referenced from menu.o(i.Set_Water_Mode_Number)
 <LI><a href="#[3d]">rt_evt_get</a> from rt_event.o(i.rt_evt_get) referenced from menu.o(i.ShowVersion)
 <LI><a href="#[3d]">rt_evt_get</a> from rt_event.o(i.rt_evt_get) referenced from fp_menu.o(i.Show_Menu_List)
 <LI><a href="#[3d]">rt_evt_get</a> from rt_event.o(i.rt_evt_get) referenced from menu.o(i.System_Inf_State)
 <LI><a href="#[3d]">rt_evt_get</a> from rt_event.o(i.rt_evt_get) referenced from menu.o(i.Test_Status)
 <LI><a href="#[3d]">rt_evt_get</a> from rt_event.o(i.rt_evt_get) referenced from menu.o(i.UpLoadApp)
 <LI><a href="#[3d]">rt_evt_get</a> from rt_event.o(i.rt_evt_get) referenced from main.o(i.task_Net)
 <LI><a href="#[3d]">rt_evt_get</a> from rt_event.o(i.rt_evt_get) referenced from main.o(i.task_main)
 <LI><a href="#[45]">rt_evt_set</a> from rt_event.o(i.rt_evt_set) referenced from main.o(i.task_RfReadSensor)
 <LI><a href="#[3c]">rt_evt_wait</a> from rt_event.o(i.rt_evt_wait) referenced from menu.o(i.Clear_Alarm_Inf)
 <LI><a href="#[3c]">rt_evt_wait</a> from rt_event.o(i.rt_evt_wait) referenced from menu.o(i.Del_Move_Mode_Number)
 <LI><a href="#[3c]">rt_evt_wait</a> from rt_event.o(i.rt_evt_wait) referenced from menu.o(i.Del_Smoke_Mode_Number)
 <LI><a href="#[3c]">rt_evt_wait</a> from rt_event.o(i.rt_evt_wait) referenced from menu.o(i.Del_Temp_Mode_Number)
 <LI><a href="#[3c]">rt_evt_wait</a> from rt_event.o(i.rt_evt_wait) referenced from menu.o(i.Del_Water_Mode_Number)
 <LI><a href="#[3c]">rt_evt_wait</a> from rt_event.o(i.rt_evt_wait) referenced from display.o(i.Display_Main_View)
 <LI><a href="#[3c]">rt_evt_wait</a> from rt_event.o(i.rt_evt_wait) referenced from menu.o(i.NB_Status)
 <LI><a href="#[3c]">rt_evt_wait</a> from rt_event.o(i.rt_evt_wait) referenced from menu.o(i.Query_online_device)
 <LI><a href="#[3c]">rt_evt_wait</a> from rt_event.o(i.rt_evt_wait) referenced from menu.o(i.Read_Move_Mode_Number)
 <LI><a href="#[3c]">rt_evt_wait</a> from rt_event.o(i.rt_evt_wait) referenced from menu.o(i.Read_Smoke_Mode_Number)
 <LI><a href="#[3c]">rt_evt_wait</a> from rt_event.o(i.rt_evt_wait) referenced from menu.o(i.Read_Temp_Mode_Number)
 <LI><a href="#[3c]">rt_evt_wait</a> from rt_event.o(i.rt_evt_wait) referenced from menu.o(i.Read_Water_Mode_Number)
 <LI><a href="#[3c]">rt_evt_wait</a> from rt_event.o(i.rt_evt_wait) referenced from menu.o(i.Server_Inf_Set)
 <LI><a href="#[3c]">rt_evt_wait</a> from rt_event.o(i.rt_evt_wait) referenced from menu.o(i.Server_Inf_Show)
 <LI><a href="#[3c]">rt_evt_wait</a> from rt_event.o(i.rt_evt_wait) referenced from menu.o(i.Set_Interval)
 <LI><a href="#[3c]">rt_evt_wait</a> from rt_event.o(i.rt_evt_wait) referenced from menu.o(i.Set_Move_Mode_Number)
 <LI><a href="#[3c]">rt_evt_wait</a> from rt_event.o(i.rt_evt_wait) referenced from menu.o(i.Set_Number)
 <LI><a href="#[3c]">rt_evt_wait</a> from rt_event.o(i.rt_evt_wait) referenced from menu.o(i.Set_RFChannelForLinkMove)
 <LI><a href="#[3c]">rt_evt_wait</a> from rt_event.o(i.rt_evt_wait) referenced from menu.o(i.Set_RFChannelForLinkTemp)
 <LI><a href="#[3c]">rt_evt_wait</a> from rt_event.o(i.rt_evt_wait) referenced from menu.o(i.Set_Sample_Interval)
 <LI><a href="#[3c]">rt_evt_wait</a> from rt_event.o(i.rt_evt_wait) referenced from menu.o(i.Set_Sensitivity)
 <LI><a href="#[3c]">rt_evt_wait</a> from rt_event.o(i.rt_evt_wait) referenced from menu.o(i.Set_Smoke_Mode_Number)
 <LI><a href="#[3c]">rt_evt_wait</a> from rt_event.o(i.rt_evt_wait) referenced from menu.o(i.Set_T_Interval)
 <LI><a href="#[3c]">rt_evt_wait</a> from rt_event.o(i.rt_evt_wait) referenced from menu.o(i.Set_Temp_Mode_Number)
 <LI><a href="#[3c]">rt_evt_wait</a> from rt_event.o(i.rt_evt_wait) referenced from menu.o(i.Set_TestNum)
 <LI><a href="#[3c]">rt_evt_wait</a> from rt_event.o(i.rt_evt_wait) referenced from menu.o(i.Set_Water_Mode_Number)
 <LI><a href="#[3c]">rt_evt_wait</a> from rt_event.o(i.rt_evt_wait) referenced from menu.o(i.ShowVersion)
 <LI><a href="#[3c]">rt_evt_wait</a> from rt_event.o(i.rt_evt_wait) referenced from fp_menu.o(i.Show_Menu_List)
 <LI><a href="#[3c]">rt_evt_wait</a> from rt_event.o(i.rt_evt_wait) referenced from menu.o(i.System_Inf_State)
 <LI><a href="#[3c]">rt_evt_wait</a> from rt_event.o(i.rt_evt_wait) referenced from menu.o(i.Test_Status)
 <LI><a href="#[3c]">rt_evt_wait</a> from rt_event.o(i.rt_evt_wait) referenced from menu.o(i.UpLoadApp)
 <LI><a href="#[3c]">rt_evt_wait</a> from rt_event.o(i.rt_evt_wait) referenced from main.o(i.task_Net)
 <LI><a href="#[3c]">rt_evt_wait</a> from rt_event.o(i.rt_evt_wait) referenced from main.o(i.task_main)
 <LI><a href="#[39]">rt_free_box</a> from rt_membox.o(i.rt_free_box) referenced from hal_cm3.o(.emb_text)
 <LI><a href="#[43]">rt_resume</a> from rt_system.o(i.rt_resume) referenced from rtx_conf_cm.o(i.os_idle_demon)
 <LI><a href="#[42]">rt_suspend</a> from rt_system.o(i.rt_suspend) referenced from rtx_conf_cm.o(i.os_idle_demon)
 <LI><a href="#[41]">rt_sys_init</a> from rt_task.o(i.rt_sys_init) referenced from main.o(i.main)
 <LI><a href="#[47]">rt_tsk_create</a> from rt_task.o(i.rt_tsk_create) referenced from main.o(i.task_initial)
 <LI><a href="#[4a]">rt_tsk_delete</a> from rt_task.o(i.rt_tsk_delete) referenced from main.o(i.task_initial)
 <LI><a href="#[48]">task_Net</a> from main.o(i.task_Net) referenced from main.o(i.task_initial)
 <LI><a href="#[46]">task_RfReadSensor</a> from main.o(i.task_RfReadSensor) referenced from main.o(i.task_initial)
 <LI><a href="#[40]">task_initial</a> from main.o(i.task_initial) referenced from main.o(i.main)
 <LI><a href="#[49]">task_main</a> from main.o(i.task_main) referenced from main.o(i.task_initial)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[3b]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(.text)
</UL>
<P><STRONG><a name="[1c2]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[6e]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[8e]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1c3]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[1c4]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[1c5]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[1c6]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[1c7]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[1b8]"></a>rt_set_PSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[1be]"></a>rt_get_PSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
</UL>

<P><STRONG><a name="[197]"></a>os_set_env</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c8]"></a>_alloc_box</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[1c9]"></a>_free_box</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = PendSV_Handler &rArr; rt_pop_req &rArr; rt_mbx_psh &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SysTick_Handler &rArr; rt_systick &rArr; rt_dec_dly &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>OS_Tick_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_irqack
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>LCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USB_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[1ca]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1cb]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[75]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_send_cmd
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_UDPSend_InfData
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Status
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Inf_State
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_RFChannelForLinkTemp
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_RFChannelForLinkMove
</UL>

<P><STRONG><a name="[c4]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_UDP_msg
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;creat_UDP_socket
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_socket
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_send_cmd
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_UDPSend_InfData_ALARM
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_UDPSend_InfData
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_UDPSend_ALARMData
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_InitPowerOn
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_M5311Inf
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Variable_Flash
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Si24r1_Data
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Status
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Query_online_device
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NB_Status
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Del_Water_Mode_Number
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Del_Temp_Mode_Number
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Del_Smoke_Mode_Number
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Del_Move_Mode_Number
</UL>

<P><STRONG><a name="[1cc]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[77]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[ed]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_check_ack
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_UDPSend_InfData_ALARM
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_UDPSend_InfData
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_UDPSend_ALARMData
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_M5311_signal
</UL>

<P><STRONG><a name="[ee]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_M5311_signal
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NB_Status
</UL>

<P><STRONG><a name="[17f]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Variable_Flash
</UL>

<P><STRONG><a name="[180]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Variable_Flash
</UL>

<P><STRONG><a name="[140]"></a>__aeabi_fmul</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Opt3001_WriteLimReg
</UL>

<P><STRONG><a name="[78]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Opt3001_WriteLimReg
</UL>

<P><STRONG><a name="[7a]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Signal
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Battery
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Battery
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>

<P><STRONG><a name="[7f]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[80]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[81]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Signal
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Battery
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTmp112Value
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Vref
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Battery
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>

<P><STRONG><a name="[82]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tmp211_WriteLimReg
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Opt3001_WriteLimReg
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Main_View
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Vref
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Battery
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
</UL>

<P><STRONG><a name="[83]"></a>__aeabi_i2f</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tmp211_WriteLimReg
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Opt3001_WriteLimReg
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTmp112Value
</UL>

<P><STRONG><a name="[85]"></a>__aeabi_ui2f</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Opt3001_WriteLimReg
</UL>

<P><STRONG><a name="[86]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Signal
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Battery
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Opt3001_WriteLimReg
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Main_View
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Vref
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Battery
</UL>

<P><STRONG><a name="[143]"></a>__aeabi_f2iz</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ffixi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Opt3001_WriteLimReg
</UL>

<P><STRONG><a name="[141]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Opt3001_WriteLimReg
</UL>

<P><STRONG><a name="[87]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tmp211_WriteLimReg
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTmp112Value
</UL>

<P><STRONG><a name="[89]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Signal
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Battery
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Opt3001_WriteLimReg
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Battery
</UL>

<P><STRONG><a name="[dd]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tmp211_WriteLimReg
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTmp112Value
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Battery
</UL>

<P><STRONG><a name="[8a]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Vref
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Battery
</UL>

<P><STRONG><a name="[1cd]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[18c]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[8b]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[7b]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[1ce]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[88]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[1cf]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[7c]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[1d0]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[1d1]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[79]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>

<P><STRONG><a name="[84]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[7e]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[7d]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>

<P><STRONG><a name="[186]"></a>__ARM_scalbn</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>

<P><STRONG><a name="[1d2]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[8c]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[8d]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[190]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[1d3]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[189]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[6f]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1d4]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[8f]"></a>ADC1_Init</STRONG> (Thumb, 320 bytes, Stack size 88 bytes, drive.o(i.ADC1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = ADC1_Init &rArr; ADC_RegularChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TempSensorVrefintCmd
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConv
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetFlagStatus
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMARequestAfterLastTransferCmd
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMACmd
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearITPendingBit
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSICmd
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Vref
</UL>

<P><STRONG><a name="[a0]"></a>ADC_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l1xx_adc.o(i.ADC_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close_ADC1
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Init
</UL>

<P><STRONG><a name="[9e]"></a>ADC_DMACmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l1xx_adc.o(i.ADC_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Init
</UL>

<P><STRONG><a name="[9d]"></a>ADC_DMARequestAfterLastTransferCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l1xx_adc.o(i.ADC_DMARequestAfterLastTransferCmd))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Init
</UL>

<P><STRONG><a name="[a2]"></a>ADC_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_adc.o(i.ADC_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close_ADC1
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Init
</UL>

<P><STRONG><a name="[a4]"></a>ADC_IO_Set_Input</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, drive.o(i.ADC_IO_Set_Input))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ADC_IO_Set_Input &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SleepInit_GPIO
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_GPIO
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close_ADC1
</UL>

<P><STRONG><a name="[9b]"></a>ADC_Init</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, stm32l1xx_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Init
</UL>

<P><STRONG><a name="[9c]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 344 bytes, Stack size 20 bytes, stm32l1xx_adc.o(i.ADC_RegularChannelConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ADC_RegularChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Init
</UL>

<P><STRONG><a name="[a3]"></a>ADC_SoftwareStartConv</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l1xx_adc.o(i.ADC_SoftwareStartConv))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Init
</UL>

<P><STRONG><a name="[9f]"></a>ADC_TempSensorVrefintCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32l1xx_adc.o(i.ADC_TempSensorVrefintCmd))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Init
</UL>

<P><STRONG><a name="[a5]"></a>BS8116A_GPIO_Set_Input</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, key.o(i.BS8116A_GPIO_Set_Input))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = BS8116A_GPIO_Set_Input &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_main
</UL>

<P><STRONG><a name="[a7]"></a>Bar</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, led_drive.o(i.Bar))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Bar &rArr; Display_HLine &rArr; set_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_HLine
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Signal
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Battery
</UL>

<P><STRONG><a name="[a9]"></a>Beep50ms_Time</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, drive.o(i.Beep50ms_Time))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Beep50ms_Time &rArr; Buzzer_50ms &rArr; Clr_Buzzer_Power &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer_50ms
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_main
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l1xx_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[aa]"></a>Buzzer_50ms</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, drive.o(i.Buzzer_50ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Buzzer_50ms &rArr; Clr_Buzzer_Power &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_Buzzer_Power
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Menu_List
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Main_View
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_RfReadSensor
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep50ms_Time
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpLoadApp
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Status
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Inf_State
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowVersion
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Water_Mode_Number
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_TestNum
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Temp_Mode_Number
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_T_Interval
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Smoke_Mode_Number
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Sensitivity
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Sample_Interval
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_RFChannelForLinkTemp
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_RFChannelForLinkMove
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Number
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Move_Mode_Number
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Interval
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Server_Inf_Show
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Server_Inf_Set
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Water_Mode_Number
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Temp_Mode_Number
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Smoke_Mode_Number
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Move_Mode_Number
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Query_online_device
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NB_Status
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Del_Water_Mode_Number
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Del_Temp_Mode_Number
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Del_Smoke_Mode_Number
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Del_Move_Mode_Number
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Alarm_Inf
</UL>

<P><STRONG><a name="[12e]"></a>ByteToHexStr</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, m5311.o(i.ByteToHexStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ByteToHexStr
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_UDPSend_InfData_ALARM
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_UDPSend_InfData
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_UDPSend_ALARMData
</UL>

<P><STRONG><a name="[ae]"></a>CC2500_GPIO_Set_Input</STRONG> (Thumb, 262 bytes, Stack size 16 bytes, drive.o(i.CC2500_GPIO_Set_Input))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CC2500_GPIO_Set_Input &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Si24r1_Data
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SleepInit_GPIO
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_GPIO
</UL>

<P><STRONG><a name="[66]"></a>Clear_Alarm_Inf</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, menu.o(i.Clear_Alarm_Inf))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Clear_Alarm_Inf &rArr; GUI_PutStringConst14x14_7x14 &rArr; GUI_PutHZ14x14 &rArr; Display_PIC &rArr; set_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Update
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_TxtLength14x14
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PutStringConst14x14_7x14
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PutStringConst14x14
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer_50ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[b5]"></a>Close_ADC1</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, drive.o(i.Close_ADC1))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Close_ADC1 &rArr; ADC_IO_Set_Input &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetFlagStatus
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSICmd
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IO_Set_Input
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Battery
</UL>

<P><STRONG><a name="[5d]"></a>Close_T_Start</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, menu.o(i.Close_T_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Close_T_Start &rArr; FLASH_Save_Para_Encode &rArr; DATA_EEPROM_ProgramByte &rArr; DATA_EEPROM_FastProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Save_Para_Encode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[4e]"></a>Close_Upload_Start</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, menu.o(i.Close_Upload_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Close_Upload_Start &rArr; FLASH_Save_Para_Encode &rArr; DATA_EEPROM_ProgramByte &rArr; DATA_EEPROM_FastProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Save_Para_Encode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[60]"></a>Close_Water_Level_Start</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, menu.o(i.Close_Water_Level_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Close_Water_Level_Start &rArr; FLASH_Save_Para_Encode &rArr; DATA_EEPROM_ProgramByte &rArr; DATA_EEPROM_FastProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Save_Para_Encode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[b7]"></a>Clr_BTDE_Power</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, drive.o(i.Clr_BTDE_Power))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Clr_BTDE_Power &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_Send_alarm
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_Send_Inf
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_InitPowerOn
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_M5311Inf
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_RfReadSensor
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SleepInit_GPIO
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_GPIO
</UL>

<P><STRONG><a name="[ad]"></a>Clr_Buzzer_Power</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, drive.o(i.Clr_Buzzer_Power))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Clr_Buzzer_Power &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SleepInit_GPIO
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_GPIO
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer_50ms
</UL>

<P><STRONG><a name="[b8]"></a>Clr_HBZ_Power</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, drive.o(i.Clr_HBZ_Power))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Clr_HBZ_Power &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SleepInit_GPIO
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_GPIO
</UL>

<P><STRONG><a name="[b9]"></a>Clr_LCD_Power</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, drive.o(i.Clr_LCD_Power))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Clr_LCD_Power &rArr; I2C_Set_Input &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Set_Input
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_main
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SleepInit_GPIO
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_GPIO
</UL>

<P><STRONG><a name="[bb]"></a>Clr_M5311_Power</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, m5311.o(i.Clr_M5311_Power))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Clr_M5311_Power &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SleepInit_GPIO
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_GPIO
</UL>

<P><STRONG><a name="[15b]"></a>Com_ForLink_Move</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, data.o(i.Com_ForLink_Move))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Com_ForLink_Move
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Si24r1_Data
</UL>

<P><STRONG><a name="[15c]"></a>Com_ForLink_Temp</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, data.o(i.Com_ForLink_Temp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Com_ForLink_Temp
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Si24r1_Data
</UL>

<P><STRONG><a name="[158]"></a>Com_Respond_Move</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, data.o(i.Com_Respond_Move))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Si24r1_Data
</UL>

<P><STRONG><a name="[15a]"></a>Com_Respond_Smoke</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, data.o(i.Com_Respond_Smoke))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Si24r1_Data
</UL>

<P><STRONG><a name="[157]"></a>Com_Respond_Temp</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, data.o(i.Com_Respond_Temp))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Si24r1_Data
</UL>

<P><STRONG><a name="[159]"></a>Com_Respond_Water</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, data.o(i.Com_Respond_Water))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Si24r1_Data
</UL>

<P><STRONG><a name="[12d]"></a>Com_Send_Alarm</STRONG> (Thumb, 536 bytes, Stack size 8 bytes, data.o(i.Com_Send_Alarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Com_Send_Alarm
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_UDPSend_ALARMData
</UL>

<P><STRONG><a name="[132]"></a>Com_Send_State</STRONG> (Thumb, 500 bytes, Stack size 36 bytes, data.o(i.Com_Send_State))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Com_Send_State
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_UDPSend_InfData_ALARM
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_UDPSend_InfData
</UL>

<P><STRONG><a name="[bc]"></a>Ctr_M5311_PMS_PIN</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, m5311.o(i.Ctr_M5311_PMS_PIN))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Ctr_M5311_PMS_PIN &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_Send_alarm
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_Send_Inf
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_InitPowerOn
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_M5311_Status
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_M5311Inf
</UL>

<P><STRONG><a name="[bd]"></a>Ctr_M5311_RST</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, m5311.o(i.Ctr_M5311_RST))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Ctr_M5311_RST &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetM5311
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_Send_alarm
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_Send_Inf
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_InitPowerOn
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_M5311Inf
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SleepInit_GPIO
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_GPIO
</UL>

<P><STRONG><a name="[be]"></a>Ctr_M5311_WakeIn_Gpio</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, m5311.o(i.Ctr_M5311_WakeIn_Gpio))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Ctr_M5311_WakeIn_Gpio &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_WakeUp_FromPSM
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_WakeUpPowerOn
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_Send_alarm
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_Send_Inf
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_InitPowerOn
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_M5311Inf
</UL>

<P><STRONG><a name="[bf]"></a>DATA_EEPROM_EraseWord</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, stm32l1xx_flash.o(i.DATA_EEPROM_EraseWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DATA_EEPROM_EraseWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_ProgramByte
</UL>

<P><STRONG><a name="[c1]"></a>DATA_EEPROM_FastProgramWord</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, stm32l1xx_flash.o(i.DATA_EEPROM_FastProgramWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DATA_EEPROM_FastProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_ProgramByte
</UL>

<P><STRONG><a name="[c2]"></a>DATA_EEPROM_ProgramByte</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, stm32l1xx_flash.o(i.DATA_EEPROM_ProgramByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DATA_EEPROM_ProgramByte &rArr; DATA_EEPROM_FastProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_FastProgramWord
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_EraseWord
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Save_Para_Encode
</UL>

<P><STRONG><a name="[d7]"></a>DATA_EEPROM_Unlock</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_flash.o(i.DATA_EEPROM_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Save_Para_Encode
</UL>

<P><STRONG><a name="[191]"></a>DBGMCU_Config</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l1xx_dbgmcu.o(i.DBGMCU_Config))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, drive.o(i.DMA1_Channel1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA1_Channel1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>DMA_ClearITPendingBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_dma.o(i.DMA_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Init
</UL>

<P><STRONG><a name="[96]"></a>DMA_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_dma.o(i.DMA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Init
</UL>

<P><STRONG><a name="[91]"></a>DMA_DeInit</STRONG> (Thumb, 324 bytes, Stack size 0 bytes, stm32l1xx_dma.o(i.DMA_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Init
</UL>

<P><STRONG><a name="[c3]"></a>DMA_GetITStatus</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32l1xx_dma.o(i.DMA_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
</UL>

<P><STRONG><a name="[94]"></a>DMA_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_dma.o(i.DMA_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Init
</UL>

<P><STRONG><a name="[92]"></a>DMA_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32l1xx_dma.o(i.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Init
</UL>

<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>Del_Move_Mode_Number</STRONG> (Thumb, 258 bytes, Stack size 32 bytes, menu.o(i.Del_Move_Mode_Number))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Del_Move_Mode_Number &rArr; GUI_PutStringConst14x14_7x14 &rArr; GUI_PutHZ14x14 &rArr; Display_PIC &rArr; set_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Update
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_TxtLength14x14
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PutStringConst14x14_7x14
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PutStringConst14x14
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Save_Para_Encode
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer_50ms
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[5a]"></a>Del_Smoke_Mode_Number</STRONG> (Thumb, 262 bytes, Stack size 32 bytes, menu.o(i.Del_Smoke_Mode_Number))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Del_Smoke_Mode_Number &rArr; GUI_PutStringConst14x14_7x14 &rArr; GUI_PutHZ14x14 &rArr; Display_PIC &rArr; set_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Update
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_TxtLength14x14
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PutStringConst14x14_7x14
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PutStringConst14x14
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Save_Para_Encode
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer_50ms
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[51]"></a>Del_Temp_Mode_Number</STRONG> (Thumb, 258 bytes, Stack size 32 bytes, menu.o(i.Del_Temp_Mode_Number))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Del_Temp_Mode_Number &rArr; GUI_PutStringConst14x14_7x14 &rArr; GUI_PutHZ14x14 &rArr; Display_PIC &rArr; set_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Update
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_TxtLength14x14
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PutStringConst14x14_7x14
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PutStringConst14x14
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Save_Para_Encode
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer_50ms
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[57]"></a>Del_Water_Mode_Number</STRONG> (Thumb, 260 bytes, Stack size 32 bytes, menu.o(i.Del_Water_Mode_Number))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Del_Water_Mode_Number &rArr; GUI_PutStringConst14x14_7x14 &rArr; GUI_PutHZ14x14 &rArr; Display_PIC &rArr; set_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Update
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_TxtLength14x14
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PutStringConst14x14_7x14
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PutStringConst14x14
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Save_Para_Encode
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer_50ms
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[c5]"></a>Display_Battery</STRONG> (Thumb, 210 bytes, Stack size 88 bytes, display.o(i.Display_Battery))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Display_Battery &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Rectangle
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bar
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Main_View
</UL>

<P><STRONG><a name="[a8]"></a>Display_HLine</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, led_drive.o(i.Display_HLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Display_HLine &rArr; set_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_pixel
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Rectangle
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bar
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Water_Mode_Number
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_TestNum
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Temp_Mode_Number
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_T_Interval
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Smoke_Mode_Number
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Sensitivity
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Sample_Interval
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Number
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Move_Mode_Number
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Interval
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Server_Inf_Set
</UL>

<P><STRONG><a name="[c8]"></a>Display_Main_View</STRONG> (Thumb, 444 bytes, Stack size 80 bytes, display.o(i.Display_Main_View))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = Display_Main_View &rArr; Enter_Main_Menu &rArr; Show_Menu_List &rArr;  Show_Menu_List (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Update
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PutStringConst14x14
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PutStringConst7x14
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Main_Menu
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Signal
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Battery
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Vref
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Battery
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer_50ms
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_main
</UL>

<P><STRONG><a name="[cf]"></a>Display_PIC</STRONG> (Thumb, 94 bytes, Stack size 56 bytes, led_drive.o(i.Display_PIC))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Display_PIC &rArr; set_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_pixel
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PutHZ14x14
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PutChar7x14
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Menu_List
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Water_Mode_Number
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Temp_Mode_Number
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Smoke_Mode_Number
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Move_Mode_Number
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Query_online_device
</UL>

<P><STRONG><a name="[c6]"></a>Display_Rectangle</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, led_drive.o(i.Display_Rectangle))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Display_Rectangle &rArr; Display_VLine &rArr; set_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_VLine
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_HLine
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Battery
</UL>

<P><STRONG><a name="[cb]"></a>Display_Signal</STRONG> (Thumb, 320 bytes, Stack size 64 bytes, display.o(i.Display_Signal))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Display_Signal &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bar
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Main_View
</UL>

<P><STRONG><a name="[d0]"></a>Display_VLine</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, led_drive.o(i.Display_VLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Display_VLine &rArr; set_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_pixel
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Rectangle
</UL>

<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32l1xx_it.o(i.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32l1xx_it.o(i.EXTI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32l1xx_it.o(i.EXTI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, stm32l1xx_it.o(i.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = EXTI9_5_IRQHandler &rArr; ReadBS8116A &rArr; I2C2_SendByte &rArr; I2C2_WaitAck &rArr; I2C2_Set_SDA_Output &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadKeyValue
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBS8116A
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_evt_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[d2]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_exti.o(i.EXTI_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_idle_demon
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WKUP_IRQHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_IRQHandler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[d1]"></a>EXTI_GetITStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l1xx_exti.o(i.EXTI_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[a6]"></a>EXTI_Init</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, stm32l1xx_exti.o(i.EXTI_Init))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_idle_demon
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_BS8116A_GPIO
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BS8116A_GPIO_Set_Input
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP112_INIT
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OPT3001_INIT
</UL>

<P><STRONG><a name="[ce]"></a>Enter_Main_Menu</STRONG> (Thumb, 48 bytes, Stack size 112 bytes, fp_menu.o(i.Enter_Main_Menu))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = Enter_Main_Menu &rArr; Show_Menu_List &rArr;  Show_Menu_List (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Menu_List
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Main_View
</UL>

<P><STRONG><a name="[d8]"></a>FLASH_GetStatus</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32l1xx_flash.o(i.FLASH_GetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[17e]"></a>FLASH_Get_Para_Decode</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, drive.o(i.FLASH_Get_Para_Decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_Get_Para_Decode
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Variable_Flash
</UL>

<P><STRONG><a name="[b6]"></a>FLASH_Save_Para_Encode</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, drive.o(i.FLASH_Save_Para_Encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = FLASH_Save_Para_Encode &rArr; DATA_EEPROM_ProgramByte &rArr; DATA_EEPROM_FastProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_Unlock
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_ProgramByte
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Variable_Flash
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Water_Mode_Number
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Temp_Mode_Number
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_T_Interval
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Smoke_Mode_Number
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Sensitivity
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Sample_Interval
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Number
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Move_Mode_Number
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Interval
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Server_Inf_Set
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Water_Level_Start
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Upload_Start
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_T_Start
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Del_Water_Mode_Number
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Del_Temp_Mode_Number
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Del_Smoke_Mode_Number
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Del_Move_Mode_Number
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close_Water_Level_Start
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close_Upload_Start
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close_T_Start
</UL>

<P><STRONG><a name="[c0]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32l1xx_flash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_ProgramByte
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_FastProgramWord
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_EraseWord
</UL>

<P><STRONG><a name="[98]"></a>GPIO_Init</STRONG> (Thumb, 132 bytes, Stack size 20 bytes, stm32l1xx_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_BTDE_Power
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_USART2
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_BTDE_Power
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_M5311_WakeIn_Gpio
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_M5311_Power
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_RST_Init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_PMS_PIN_Init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ctr_M5311_WakeIn_Gpio
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ctr_M5311_RST
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ctr_M5311_PMS_PIN
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_M5311_Power
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Disable
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_BS8116A_GPIO
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BS8116A_GPIO_Set_Input
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Set_SDA_Output
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Set_SDA_Input
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI24R1_Init
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LCD_Power
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_IO_Set_Input
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Unused_GPIO
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_HS1
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Set_Input
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_LCD_Power
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_HBZ_Power
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_Buzzer_Power
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC2500_GPIO_Set_Input
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer_50ms
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IO_Set_Input
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Init
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP112_INIT
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_TMP112_GPIO
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Set_SDA_Output
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Set_SDA_Input
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OPT3001_INIT
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_OPT_GPIO
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Set_SDA_Output
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Set_SDA_Input
</UL>

<P><STRONG><a name="[118]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, stm32l1xx_gpio.o(i.GPIO_PinAFConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_USART2
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
</UL>

<P><STRONG><a name="[ec]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_M5311_Status
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_WaitAck
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_ReceiveByte
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI24R1_TxPacket
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Si24r1_Data
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_RfReadSensor
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_read
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_read
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RW
</UL>

<P><STRONG><a name="[af]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l1xx_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_M5311_Power
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetM5311
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_WakeUp_FromPSM
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_WakeUpPowerOn
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_RST_Init
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_WaitAck
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Stop
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Start
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_SendByte
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_ReceiveByte
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI24R1_TxPacket
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI24R1_TX_Mode
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI24R1_Standby_Mode
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI24R1_RX_Mode
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI24R1_Init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC2500_GPIO_Set_Input
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitAck
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendByte
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadByte
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitAck
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendByte
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadByte
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI24R1_Write_Reg
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI24R1_Write_Buf
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI24R1_Read_Reg
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI24R1_Read_Buf
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RW
</UL>

<P><STRONG><a name="[ac]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l1xx_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_BTDE_Power
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_M5311_Power
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetM5311
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_WakeUp_FromPSM
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_WakeUpPowerOn
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_BS8116A_GPIO
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_WaitAck
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Stop
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Start
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_SendByte
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_ReceiveByte
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI24R1_TxPacket
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI24R1_RX_Mode
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI24R1_Init
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LCD_Power
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer_50ms
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_TMP112_GPIO
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitAck
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendByte
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadByte
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_OPT_GPIO
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitAck
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendByte
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadByte
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI24R1_Write_Reg
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI24R1_Write_Buf
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI24R1_Read_Reg
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI24R1_Read_Buf
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RW
</UL>

<P><STRONG><a name="[d9]"></a>GUI_PutChar7x14</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, font7x14.o(i.GUI_PutChar7x14))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = GUI_PutChar7x14 &rArr; Display_PIC &rArr; set_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_PIC
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PutStringConst14x14_7x14
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PutStringConst14x14
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PutString14x14
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PutStringConst7x14
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PutString7x14
</UL>

<P><STRONG><a name="[da]"></a>GUI_PutHZ14x14</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, font14x14.o(i.GUI_PutHZ14x14))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = GUI_PutHZ14x14 &rArr; Display_PIC &rArr; set_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_PIC
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PutStringConst14x14_7x14
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PutStringConst14x14
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PutString14x14
</UL>

<P><STRONG><a name="[db]"></a>GUI_PutString14x14</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, font14x14.o(i.GUI_PutString14x14))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = GUI_PutString14x14 &rArr; GUI_PutHZ14x14 &rArr; Display_PIC &rArr; set_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PutHZ14x14
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PutChar7x14
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Menu_List
</UL>

<P><STRONG><a name="[dc]"></a>GUI_PutString7x14</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, font7x14.o(i.GUI_PutString7x14))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = GUI_PutString7x14 &rArr; GUI_PutChar7x14 &rArr; Display_PIC &rArr; set_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PutChar7x14
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Inf_State
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Water_Mode_Number
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_TestNum
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Temp_Mode_Number
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_T_Interval
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Smoke_Mode_Number
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Sensitivity
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Sample_Interval
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_RFChannelForLinkTemp
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_RFChannelForLinkMove
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Number
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Move_Mode_Number
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Interval
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Server_Inf_Show
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Server_Inf_Set
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Water_Mode_Number
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Temp_Mode_Number
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Smoke_Mode_Number
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Move_Mode_Number
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Query_online_device
</UL>

<P><STRONG><a name="[b3]"></a>GUI_PutStringConst14x14</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, font14x14.o(i.GUI_PutStringConst14x14))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = GUI_PutStringConst14x14 &rArr; GUI_PutHZ14x14 &rArr; Display_PIC &rArr; set_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PutHZ14x14
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PutChar7x14
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Main_View
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Del_Water_Mode_Number
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Del_Temp_Mode_Number
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Del_Smoke_Mode_Number
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Del_Move_Mode_Number
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Alarm_Inf
</UL>

<P><STRONG><a name="[b1]"></a>GUI_PutStringConst14x14_7x14</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, font14x14.o(i.GUI_PutStringConst14x14_7x14))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = GUI_PutStringConst14x14_7x14 &rArr; GUI_PutHZ14x14 &rArr; Display_PIC &rArr; set_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PutHZ14x14
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PutChar7x14
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Menu_List
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpLoadApp
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Status
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Inf_State
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowVersion
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Water_Mode_Number
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_TestNum
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Temp_Mode_Number
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_T_Interval
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Smoke_Mode_Number
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Sensitivity
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Sample_Interval
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_RFChannelForLinkTemp
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_RFChannelForLinkMove
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Number
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Move_Mode_Number
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Interval
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Server_Inf_Show
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Server_Inf_Set
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Water_Mode_Number
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Temp_Mode_Number
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Smoke_Mode_Number
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Move_Mode_Number
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Query_online_device
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NB_Status
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Del_Water_Mode_Number
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Del_Temp_Mode_Number
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Del_Smoke_Mode_Number
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Del_Move_Mode_Number
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Alarm_Inf
</UL>

<P><STRONG><a name="[cd]"></a>GUI_PutStringConst7x14</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, font7x14.o(i.GUI_PutStringConst7x14))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = GUI_PutStringConst7x14 &rArr; GUI_PutChar7x14 &rArr; Display_PIC &rArr; set_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PutChar7x14
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Main_View
</UL>

<P><STRONG><a name="[ca]"></a>Get_Battery</STRONG> (Thumb, 318 bytes, Stack size 72 bytes, drive.o(i.Get_Battery))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Get_Battery &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close_ADC1
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Main_View
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_RfReadSensor
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[de]"></a>Get_M5311Inf</STRONG> (Thumb, 186 bytes, Stack size 8 bytes, m5311.o(i.Get_M5311Inf))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = Get_M5311Inf &rArr; M5311_InitNetWork &rArr; Get_M5311_signal &rArr; M5311_send_cmd &rArr; M5311_check_ack &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_Close
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_BTDE_Power
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_USART2
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_BTDE_Power
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_M5311_Power
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_send_cmd
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_WakeUp_FromPSM
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_UNLOCK_Sleep
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_LOCK_Sleep
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_InitNetWork
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_M5311_signal
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_M5311_IMSI
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ctr_M5311_WakeIn_Gpio
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ctr_M5311_RST
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ctr_M5311_PMS_PIN
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NB_Status
</UL>

<P><STRONG><a name="[e7]"></a>Get_M5311_IMSI</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, m5311.o(i.Get_M5311_IMSI))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = Get_M5311_IMSI &rArr; M5311_send_cmd &rArr; M5311_check_ack &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_send_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_InitPowerOn
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_M5311Inf
</UL>

<P><STRONG><a name="[ea]"></a>Get_M5311_Status</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, m5311.o(i.Get_M5311_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Get_M5311_Status &rArr; M5311_PMS_PIN_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_PMS_PIN_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ctr_M5311_PMS_PIN
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_WakeUp_FromPSM
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_WakeUpPowerOn
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_PowerOn
</UL>

<P><STRONG><a name="[e6]"></a>Get_M5311_signal</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, m5311.o(i.Get_M5311_signal))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = Get_M5311_signal &rArr; M5311_send_cmd &rArr; M5311_check_ack &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_send_cmd
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_InitPowerOn
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_InitNetWork
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_M5311Inf
</UL>

<P><STRONG><a name="[b2]"></a>Get_TxtLength14x14</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, font14x14.o(i.Get_TxtLength14x14))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Get_TxtLength14x14
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_TestNum
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_T_Interval
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Sensitivity
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Sample_Interval
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Number
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Interval
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Del_Water_Mode_Number
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Del_Temp_Mode_Number
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Del_Smoke_Mode_Number
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Del_Move_Mode_Number
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Alarm_Inf
</UL>

<P><STRONG><a name="[c9]"></a>Get_Vref</STRONG> (Thumb, 184 bytes, Stack size 56 bytes, drive.o(i.Get_Vref))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = Get_Vref &rArr; ADC1_Init &rArr; ADC_RegularChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Main_View
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_RfReadSensor
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17c]"></a>GotoUploadApp</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, main.o(i.GotoUploadApp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GotoUploadApp
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpLoadApp
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l1xx_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[133]"></a>HexToInt</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, m5311.o(i.HexToInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HexToInt
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_UDPSend_InfData_ALARM
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_UDPSend_InfData
</UL>

<P><STRONG><a name="[ba]"></a>I2C_Set_Input</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, drive.o(i.I2C_Set_Input))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = I2C_Set_Input &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_RfReadSensor
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SleepInit_GPIO
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_GPIO
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_LCD_Power
</UL>

<P><STRONG><a name="[a1]"></a>IWDG_ReloadCounter</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_iwdg.o(i.IWDG_ReloadCounter))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_idle_demon
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_send_cmd
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Menu_List
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Si24r1_Data
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Main_View
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_RfReadSensor
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Vref
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Init
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpLoadApp
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Status
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Inf_State
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowVersion
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Water_Mode_Number
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_TestNum
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Temp_Mode_Number
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_T_Interval
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Smoke_Mode_Number
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Sensitivity
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Sample_Interval
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_RFChannelForLinkTemp
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_RFChannelForLinkMove
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Number
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Move_Mode_Number
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Interval
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Server_Inf_Show
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Server_Inf_Set
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Water_Mode_Number
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Temp_Mode_Number
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Smoke_Mode_Number
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Move_Mode_Number
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Query_online_device
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NB_Status
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Del_Water_Mode_Number
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Del_Temp_Mode_Number
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Del_Smoke_Mode_Number
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Del_Move_Mode_Number
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Alarm_Inf
</UL>

<P><STRONG><a name="[109]"></a>Init_BS8116A</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, key.o(i.Init_BS8116A))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = Init_BS8116A &rArr; I2C2_SendByte &rArr; I2C2_WaitAck &rArr; I2C2_Set_SDA_Output &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_BS8116A_GPIO
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Stop
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Start
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_main
</UL>

<P><STRONG><a name="[10a]"></a>Init_BS8116A_GPIO</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, key.o(i.Init_BS8116A_GPIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Init_BS8116A_GPIO &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_BS8116A
</UL>

<P><STRONG><a name="[10c]"></a>Init_GPIO</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, drive.o(i.Init_GPIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Init_GPIO &rArr; Clr_LCD_Power &rArr; I2C_Set_Input &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_BTDE_Power
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ctr_M5311_RST
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_M5311_Power
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_IO_Set_Input
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_HS1
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Set_Input
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_LCD_Power
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_HBZ_Power
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_Buzzer_Power
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC2500_GPIO_Set_Input
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IO_Set_Input
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10e]"></a>Init_HS1</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, drive.o(i.Init_HS1))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Init_HS1 &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_GPIO
</UL>

<P><STRONG><a name="[10f]"></a>Init_OPT3001</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, opt3001.o(i.Init_OPT3001))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = Init_OPT3001 &rArr; OPT3001_WriteReg &rArr; I2C_SendByte &rArr; I2C_WaitAck &rArr; I2C_Set_SDA_Output &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OPT3001_WriteReg
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OPT3001_INIT
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_OPT_GPIO
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[110]"></a>Init_OPT_GPIO</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, opt3001.o(i.Init_OPT_GPIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Init_OPT_GPIO &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_OPT3001
</UL>

<P><STRONG><a name="[113]"></a>Init_TMP112</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, tmp112.o(i.Init_TMP112))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Init_TMP112 &rArr; Tmp112_WriteConfig &rArr; I2C_SendByte &rArr; I2C_WaitAck &rArr; I2C_Set_SDA_Output &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tmp112_WriteConfig
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP112_INIT
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_TMP112_GPIO
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[114]"></a>Init_TMP112_GPIO</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, tmp112.o(i.Init_TMP112_GPIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Init_TMP112_GPIO &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_TMP112
</UL>

<P><STRONG><a name="[df]"></a>Init_USART2</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, usart.o(i.Init_USART2))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = Init_USART2 &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_Send_alarm
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_Send_Inf
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_InitPowerOn
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_M5311Inf
</UL>

<P><STRONG><a name="[11d]"></a>Init_Unused_GPIO</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, drive.o(i.Init_Unused_GPIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Init_Unused_GPIO &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16d]"></a>ItemNum2Str</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, fp_menu.o(i.ItemNum2Str))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ItemNum2Str
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Menu_List
</UL>

<P><STRONG><a name="[b0]"></a>LCD_Clear</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, led_drive.o(i.LCD_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_Clear
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Menu_List
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Main_View
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_main
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpLoadApp
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Status
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Inf_State
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowVersion
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Water_Mode_Number
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_TestNum
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Temp_Mode_Number
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_T_Interval
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Smoke_Mode_Number
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Sensitivity
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Sample_Interval
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_RFChannelForLinkTemp
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_RFChannelForLinkMove
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Number
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Move_Mode_Number
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Interval
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Server_Inf_Show
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Server_Inf_Set
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Water_Mode_Number
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Temp_Mode_Number
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Smoke_Mode_Number
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Move_Mode_Number
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Query_online_device
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NB_Status
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Del_Water_Mode_Number
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Del_Temp_Mode_Number
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Del_Smoke_Mode_Number
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Del_Move_Mode_Number
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Alarm_Inf
</UL>

<P><STRONG><a name="[b4]"></a>LCD_Update</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, led_drive.o(i.LCD_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LCD_Update &rArr; OLED_Set_Pos &rArr; OLED_WR_Byte &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Set_Pos
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Menu_List
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Main_View
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_main
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpLoadApp
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Status
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Inf_State
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowVersion
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Water_Mode_Number
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_TestNum
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Temp_Mode_Number
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_T_Interval
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Smoke_Mode_Number
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Sensitivity
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Sample_Interval
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_RFChannelForLinkTemp
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_RFChannelForLinkMove
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Number
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Move_Mode_Number
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Interval
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Server_Inf_Show
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Server_Inf_Set
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Water_Mode_Number
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Temp_Mode_Number
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Smoke_Mode_Number
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Move_Mode_Number
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Query_online_device
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NB_Status
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Del_Water_Mode_Number
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Del_Temp_Mode_Number
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Del_Smoke_Mode_Number
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Del_Move_Mode_Number
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Alarm_Inf
</UL>

<P><STRONG><a name="[120]"></a>M5311_FailurePowerOn</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, m5311.o(i.M5311_FailurePowerOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = M5311_FailurePowerOn &rArr; M5311_LOCK_Sleep &rArr; M5311_send_cmd &rArr; M5311_check_ack &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetM5311
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_send_cmd
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_LOCK_Sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_Send_alarm
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_Send_Inf
</UL>

<P><STRONG><a name="[e8]"></a>M5311_InitNetWork</STRONG> (Thumb, 198 bytes, Stack size 8 bytes, m5311.o(i.M5311_InitNetWork))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = M5311_InitNetWork &rArr; Get_M5311_signal &rArr; M5311_send_cmd &rArr; M5311_check_ack &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_send_cmd
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_M5311_signal
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_Send_alarm
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_Send_Inf
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_M5311Inf
</UL>

<P><STRONG><a name="[122]"></a>M5311_InitPowerOn</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, m5311.o(i.M5311_InitPowerOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = M5311_InitPowerOn &rArr; Get_M5311_IMSI &rArr; M5311_send_cmd &rArr; M5311_check_ack &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_Close
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_BTDE_Power
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_USART2
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_BTDE_Power
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_M5311_Power
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_send_cmd
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_WakeUp_FromPSM
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_UNLOCK_Sleep
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_LOCK_Sleep
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_M5311_signal
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_M5311_IMSI
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ctr_M5311_WakeIn_Gpio
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ctr_M5311_RST
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ctr_M5311_PMS_PIN
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_Net
</UL>

<P><STRONG><a name="[e5]"></a>M5311_LOCK_Sleep</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, m5311.o(i.M5311_LOCK_Sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = M5311_LOCK_Sleep &rArr; M5311_send_cmd &rArr; M5311_check_ack &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_send_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_WakeUpPowerOn
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_PowerOn
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_InitPowerOn
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_FailurePowerOn
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_M5311Inf
</UL>

<P><STRONG><a name="[eb]"></a>M5311_PMS_PIN_Init</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, m5311.o(i.M5311_PMS_PIN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = M5311_PMS_PIN_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_M5311_Status
</UL>

<P><STRONG><a name="[123]"></a>M5311_PowerOn</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, m5311.o(i.M5311_PowerOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = M5311_PowerOn &rArr; M5311_WakeUpPowerOn &rArr; M5311_LOCK_Sleep &rArr; M5311_send_cmd &rArr; M5311_check_ack &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_send_cmd
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_WakeUpPowerOn
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_LOCK_Sleep
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_M5311_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_Send_alarm
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_Send_Inf
</UL>

<P><STRONG><a name="[125]"></a>M5311_RST_Init</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, m5311.o(i.M5311_RST_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = M5311_RST_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetM5311
</UL>

<P><STRONG><a name="[126]"></a>M5311_Send_Inf</STRONG> (Thumb, 280 bytes, Stack size 24 bytes, m5311.o(i.M5311_Send_Inf))
<BR><BR>[Stack]<UL><LI>Max Depth = 1700<LI>Call Chain = M5311_Send_Inf &rArr; M5311_UDPSend_InfData &rArr; send_UDP_msg &rArr; M5311_send_cmd &rArr; M5311_check_ack &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_Close
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Int_Init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_BTDE_Power
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_USART2
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_BTDE_Power
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_socket
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_UNLOCK_Sleep
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_UDPSend_InfData
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_PowerOn
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_InitNetWork
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_FailurePowerOn
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ctr_M5311_WakeIn_Gpio
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ctr_M5311_RST
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ctr_M5311_PMS_PIN
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_Net
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Status
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NB_Status
</UL>

<P><STRONG><a name="[12a]"></a>M5311_Send_alarm</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, m5311.o(i.M5311_Send_alarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 2292<LI>Call Chain = M5311_Send_alarm &rArr; M5311_UDPSend_ALARMData &rArr; M5311_UDPSend_InfData_ALARM &rArr; send_UDP_msg &rArr; M5311_send_cmd &rArr; M5311_check_ack &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_Close
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_BTDE_Power
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_USART2
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_BTDE_Power
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_socket
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_UNLOCK_Sleep
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_UDPSend_ALARMData
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_PowerOn
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_InitNetWork
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_FailurePowerOn
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ctr_M5311_WakeIn_Gpio
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ctr_M5311_RST
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ctr_M5311_PMS_PIN
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_Net
</UL>

<P><STRONG><a name="[12b]"></a>M5311_UDPSend_ALARMData</STRONG> (Thumb, 278 bytes, Stack size 592 bytes, m5311.o(i.M5311_UDPSend_ALARMData))
<BR><BR>[Stack]<UL><LI>Max Depth = 2268<LI>Call Chain = M5311_UDPSend_ALARMData &rArr; M5311_UDPSend_InfData_ALARM &rArr; send_UDP_msg &rArr; M5311_send_cmd &rArr; M5311_check_ack &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Send_Alarm
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_UDP_msg
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;creat_UDP_socket
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_send_cmd
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_check_ack
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_UDPSend_InfData_ALARM
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteToHexStr
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_Send_alarm
</UL>

<P><STRONG><a name="[127]"></a>M5311_UDPSend_InfData</STRONG> (Thumb, 484 bytes, Stack size 592 bytes, m5311.o(i.M5311_UDPSend_InfData))
<BR><BR>[Stack]<UL><LI>Max Depth = 1676<LI>Call Chain = M5311_UDPSend_InfData &rArr; send_UDP_msg &rArr; M5311_send_cmd &rArr; M5311_check_ack &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Int_Init
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Send_State
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_UDP_msg
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;creat_UDP_socket
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_send_cmd
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_check_ack
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexToInt
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteToHexStr
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_Send_Inf
</UL>

<P><STRONG><a name="[131]"></a>M5311_UDPSend_InfData_ALARM</STRONG> (Thumb, 370 bytes, Stack size 592 bytes, m5311.o(i.M5311_UDPSend_InfData_ALARM))
<BR><BR>[Stack]<UL><LI>Max Depth = 1676<LI>Call Chain = M5311_UDPSend_InfData_ALARM &rArr; send_UDP_msg &rArr; M5311_send_cmd &rArr; M5311_check_ack &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Send_State
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_UDP_msg
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_send_cmd
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_check_ack
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexToInt
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteToHexStr
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_UDPSend_ALARMData
</UL>

<P><STRONG><a name="[e9]"></a>M5311_UNLOCK_Sleep</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, m5311.o(i.M5311_UNLOCK_Sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = M5311_UNLOCK_Sleep &rArr; M5311_send_cmd &rArr; M5311_check_ack &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_send_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_Send_alarm
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_Send_Inf
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_InitPowerOn
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_M5311Inf
</UL>

<P><STRONG><a name="[124]"></a>M5311_WakeUpPowerOn</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, m5311.o(i.M5311_WakeUpPowerOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = M5311_WakeUpPowerOn &rArr; M5311_LOCK_Sleep &rArr; M5311_send_cmd &rArr; M5311_check_ack &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_M5311_WakeIn_Gpio
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_send_cmd
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_LOCK_Sleep
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_M5311_Status
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ctr_M5311_WakeIn_Gpio
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_PowerOn
</UL>

<P><STRONG><a name="[e2]"></a>M5311_WakeUp_FromPSM</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, m5311.o(i.M5311_WakeUp_FromPSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = M5311_WakeUp_FromPSM &rArr; Get_M5311_Status &rArr; M5311_PMS_PIN_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_M5311_WakeIn_Gpio
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_M5311_Status
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ctr_M5311_WakeIn_Gpio
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_InitPowerOn
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_M5311Inf
</UL>

<P><STRONG><a name="[130]"></a>M5311_check_ack</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, m5311.o(i.M5311_check_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = M5311_check_ack &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_send_cmd
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_UDPSend_InfData_ALARM
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_UDPSend_InfData
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_UDPSend_ALARMData
</UL>

<P><STRONG><a name="[e3]"></a>M5311_send_cmd</STRONG> (Thumb, 124 bytes, Stack size 520 bytes, m5311.o(i.M5311_send_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = M5311_send_cmd &rArr; M5311_check_ack &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_send_str
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_check_ack
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_UDP_msg
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;creat_UDP_socket
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_socket
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_WakeUpPowerOn
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_UNLOCK_Sleep
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_UDPSend_InfData_ALARM
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_UDPSend_InfData
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_UDPSend_ALARMData
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_PowerOn
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_LOCK_Sleep
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_InitPowerOn
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_InitNetWork
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_FailurePowerOn
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_M5311_signal
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_M5311_IMSI
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_M5311Inf
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l1xx_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>NB_Status</STRONG> (Thumb, 434 bytes, Stack size 80 bytes, menu.o(i.NB_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 1780<LI>Call Chain = NB_Status &rArr; M5311_Send_Inf &rArr; M5311_UDPSend_InfData &rArr; send_UDP_msg &rArr; M5311_send_cmd &rArr; M5311_check_ack &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_Send_Inf
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_M5311Inf
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Update
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PutStringConst14x14_7x14
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer_50ms
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[95]"></a>NVIC_Init</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_idle_demon
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_Close
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Int_Init
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_USART2
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Disable
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_BS8116A_GPIO
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BS8116A_GPIO_Set_Input
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Init
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP112_INIT
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OPT3001_INIT
</UL>

<P><STRONG><a name="[11a]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_USART2
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeriphClock_Initialize
</UL>

<P><STRONG><a name="[145]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, misc.o(i.NVIC_SetVectorTable))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeriphClock_Initialize
</UL>

<P><STRONG><a name="[136]"></a>OLED_Clear</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, led_drive.o(i.OLED_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OLED_Clear &rArr; OLED_WR_Byte &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
</UL>

<P><STRONG><a name="[137]"></a>OLED_Disable</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, led_drive.o(i.OLED_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = OLED_Disable &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_main
</UL>

<P><STRONG><a name="[10d]"></a>OLED_IO_Set_Input</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, drive.o(i.OLED_IO_Set_Input))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = OLED_IO_Set_Input &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SleepInit_GPIO
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_GPIO
</UL>

<P><STRONG><a name="[13a]"></a>OLED_Init</STRONG> (Thumb, 336 bytes, Stack size 16 bytes, led_drive.o(i.OLED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = OLED_Init &rArr; SPI1_Init &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Set_Pos
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_main
</UL>

<P><STRONG><a name="[11e]"></a>OLED_Set_Pos</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, led_drive.o(i.OLED_Set_Pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OLED_Set_Pos &rArr; OLED_WR_Byte &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Update
</UL>

<P><STRONG><a name="[11f]"></a>OLED_WR_Byte</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, led_drive.o(i.OLED_WR_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OLED_WR_Byte &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Set_Pos
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Update
</UL>

<P><STRONG><a name="[13d]"></a>OPT3001_GetLuxValue</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, opt3001.o(i.OPT3001_GetLuxValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = OPT3001_GetLuxValue &rArr; OPT3001_read &rArr; I2C_SendByte &rArr; I2C_WaitAck &rArr; I2C_Set_SDA_Output &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OPT3001_read
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_RfReadSensor
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[111]"></a>OPT3001_INIT</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, opt3001.o(i.OPT3001_INIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = OPT3001_INIT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_OPT3001
</UL>

<P><STRONG><a name="[112]"></a>OPT3001_WriteReg</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, opt3001.o(i.OPT3001_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = OPT3001_WriteReg &rArr; I2C_SendByte &rArr; I2C_WaitAck &rArr; I2C_Set_SDA_Output &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Opt3001_WriteLimReg
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_OPT3001
</UL>

<P><STRONG><a name="[13e]"></a>OPT3001_read</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, opt3001.o(i.OPT3001_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = OPT3001_read &rArr; I2C_SendByte &rArr; I2C_WaitAck &rArr; I2C_Set_SDA_Output &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendByte
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opt3001_manufacturer_id
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opt3001_limUp
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opt3001_limDown
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opt3001_device_id
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opt3001_REG
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OPT3001_GetLuxValue
</UL>

<P><STRONG><a name="[5c]"></a>Open_T_Start</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, menu.o(i.Open_T_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Open_T_Start &rArr; FLASH_Save_Para_Encode &rArr; DATA_EEPROM_ProgramByte &rArr; DATA_EEPROM_FastProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Save_Para_Encode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[4d]"></a>Open_Upload_Start</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, menu.o(i.Open_Upload_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Open_Upload_Start &rArr; FLASH_Save_Para_Encode &rArr; DATA_EEPROM_ProgramByte &rArr; DATA_EEPROM_FastProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Save_Para_Encode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[5f]"></a>Open_Water_Level_Start</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, menu.o(i.Open_Water_Level_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Open_Water_Level_Start &rArr; FLASH_Save_Para_Encode &rArr; DATA_EEPROM_ProgramByte &rArr; DATA_EEPROM_FastProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Save_Para_Encode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[13f]"></a>Opt3001_WriteLimReg</STRONG> (Thumb, 172 bytes, Stack size 56 bytes, opt3001.o(i.Opt3001_WriteLimReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = Opt3001_WriteLimReg &rArr; log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OPT3001_WriteReg
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[199]"></a>PWR_ClearFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l1xx_pwr.o(i.PWR_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_idle_demon
</UL>

<P><STRONG><a name="[1a1]"></a>PWR_EnterSTOPMode</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32l1xx_pwr.o(i.PWR_EnterSTOPMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PWR_EnterSTOPMode
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_idle_demon
</UL>

<P><STRONG><a name="[1a2]"></a>PWR_GetFlagStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l1xx_pwr.o(i.PWR_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_idle_demon
</UL>

<P><STRONG><a name="[198]"></a>PWR_RTCAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_pwr.o(i.PWR_RTCAccessCmd))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_idle_demon
</UL>

<P><STRONG><a name="[144]"></a>PeriphClock_Initialize</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, drive.o(i.PeriphClock_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PeriphClock_Initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVectorTable
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6a]"></a>Query_online_device</STRONG> (Thumb, 612 bytes, Stack size 320 bytes, menu.o(i.Query_online_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = Query_online_device &rArr; GUI_PutStringConst14x14_7x14 &rArr; GUI_PutHZ14x14 &rArr; Display_PIC &rArr; set_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_PIC
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Update
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PutStringConst14x14_7x14
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PutString7x14
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer_50ms
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[90]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(i.RCC_AHBPeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeriphClock_Initialize
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Init
</UL>

<P><STRONG><a name="[117]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_idle_demon
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_Close
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Int_Init
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_USART2
</UL>

<P><STRONG><a name="[169]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(i.RCC_APB1PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
</UL>

<P><STRONG><a name="[9a]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Disable
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeriphClock_Initialize
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close_ADC1
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Init
</UL>

<P><STRONG><a name="[168]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(i.RCC_APB2PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
</UL>

<P><STRONG><a name="[17b]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 234 bytes, Stack size 20 bytes, stm32l1xx_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[99]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32l1xx_rcc.o(i.RCC_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_idle_demon
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Init
</UL>

<P><STRONG><a name="[97]"></a>RCC_HSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(i.RCC_HSICmd))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close_ADC1
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Init
</UL>

<P><STRONG><a name="[19a]"></a>RCC_LSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(i.RCC_LSICmd))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_idle_demon
</UL>

<P><STRONG><a name="[19c]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(i.RCC_RTCCLKCmd))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_idle_demon
</UL>

<P><STRONG><a name="[19b]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(i.RCC_RTCCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_idle_demon
</UL>

<P><STRONG><a name="[148]"></a>RTC_AlarmCmd</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, stm32l1xx_rtc.o(i.RTC_AlarmCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_AlarmCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_IRQHandler
</UL>

<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32l1xx_it.o(i.RTC_Alarm_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RTC_Alarm_IRQHandler &rArr; RTC_AlarmCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetITStatus
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClearITPendingBit
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_AlarmCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[147]"></a>RTC_ClearITPendingBit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32l1xx_rtc.o(i.RTC_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WKUP_IRQHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_IRQHandler
</UL>

<P><STRONG><a name="[14a]"></a>RTC_EnterInitMode</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, stm32l1xx_rtc.o(i.RTC_EnterInitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[14b]"></a>RTC_ExitInitMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l1xx_rtc.o(i.RTC_ExitInitMode))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[146]"></a>RTC_GetITStatus</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, stm32l1xx_rtc.o(i.RTC_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RTC_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WKUP_IRQHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_IRQHandler
</UL>

<P><STRONG><a name="[19d]"></a>RTC_ITConfig</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, stm32l1xx_rtc.o(i.RTC_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_idle_demon
</UL>

<P><STRONG><a name="[149]"></a>RTC_Init</STRONG> (Thumb, 94 bytes, Stack size 12 bytes, stm32l1xx_rtc.o(i.RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RTC_Init &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_idle_demon
</UL>

<P><STRONG><a name="[14c]"></a>RTC_SetDate</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, stm32l1xx_rtc.o(i.RTC_SetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RTC_SetDate &rArr; RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_idle_demon
</UL>

<P><STRONG><a name="[150]"></a>RTC_SetTime</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, stm32l1xx_rtc.o(i.RTC_SetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RTC_SetTime &rArr; RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_idle_demon
</UL>

<P><STRONG><a name="[19f]"></a>RTC_SetWakeUpCounter</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l1xx_rtc.o(i.RTC_SetWakeUpCounter))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_idle_demon
</UL>

<P><STRONG><a name="[d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32l1xx_it.o(i.RTC_WKUP_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RTC_WKUP_IRQHandler &rArr; RTC_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetITStatus
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[14f]"></a>RTC_WaitForSynchro</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, stm32l1xx_rtc.o(i.RTC_WaitForSynchro))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_idle_demon
</UL>

<P><STRONG><a name="[19e]"></a>RTC_WakeUpClockConfig</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32l1xx_rtc.o(i.RTC_WakeUpClockConfig))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_idle_demon
</UL>

<P><STRONG><a name="[1a0]"></a>RTC_WakeUpCmd</STRONG> (Thumb, 116 bytes, Stack size 12 bytes, stm32l1xx_rtc.o(i.RTC_WakeUpCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RTC_WakeUpCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_idle_demon
</UL>

<P><STRONG><a name="[d3]"></a>ReadBS8116A</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, key.o(i.ReadBS8116A))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = ReadBS8116A &rArr; I2C2_SendByte &rArr; I2C2_WaitAck &rArr; I2C2_Set_SDA_Output &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Stop
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Start
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_SendByte
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_ReceiveByte
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[d4]"></a>ReadKeyValue</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, key.o(i.ReadKeyValue))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[151]"></a>ReadTmp112Value</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, tmp112.o(i.ReadTmp112Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ReadTmp112Value &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendByte
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadByte
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_RfReadSensor
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[55]"></a>Read_Move_Mode_Number</STRONG> (Thumb, 508 bytes, Stack size 112 bytes, menu.o(i.Read_Move_Mode_Number))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = Read_Move_Mode_Number &rArr; GUI_PutStringConst14x14_7x14 &rArr; GUI_PutHZ14x14 &rArr; Display_PIC &rArr; set_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_PIC
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Update
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PutStringConst14x14_7x14
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PutString7x14
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer_50ms
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[152]"></a>Read_Si24r1_Data</STRONG> (Thumb, 646 bytes, Stack size 56 bytes, data.o(i.Read_Si24r1_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Read_Si24r1_Data &rArr; SI24R1_TxPacket &rArr; SI24R1_Write_Buf &rArr; SPI_RW
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI24R1_TxPacket
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI24R1_TX_Mode
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI24R1_Standby_Mode
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI24R1_RxPacket
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI24R1_RX_Mode
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI24R1_Init
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Respond_Water
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Respond_Temp
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Respond_Smoke
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Respond_Move
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_ForLink_Temp
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_ForLink_Move
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC2500_GPIO_Set_Input
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_RfReadSensor
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Inf_State
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_RFChannelForLinkTemp
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_RFChannelForLinkMove
</UL>

<P><STRONG><a name="[5b]"></a>Read_Smoke_Mode_Number</STRONG> (Thumb, 508 bytes, Stack size 112 bytes, menu.o(i.Read_Smoke_Mode_Number))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = Read_Smoke_Mode_Number &rArr; GUI_PutStringConst14x14_7x14 &rArr; GUI_PutHZ14x14 &rArr; Display_PIC &rArr; set_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_PIC
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Update
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PutStringConst14x14_7x14
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PutString7x14
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer_50ms
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[52]"></a>Read_Temp_Mode_Number</STRONG> (Thumb, 508 bytes, Stack size 112 bytes, menu.o(i.Read_Temp_Mode_Number))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = Read_Temp_Mode_Number &rArr; GUI_PutStringConst14x14_7x14 &rArr; GUI_PutHZ14x14 &rArr; Display_PIC &rArr; set_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_PIC
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Update
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PutStringConst14x14_7x14
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PutString7x14
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer_50ms
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[58]"></a>Read_Water_Mode_Number</STRONG> (Thumb, 508 bytes, Stack size 112 bytes, menu.o(i.Read_Water_Mode_Number))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = Read_Water_Mode_Number &rArr; GUI_PutStringConst14x14_7x14 &rArr; GUI_PutHZ14x14 &rArr; Display_PIC &rArr; set_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_PIC
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Update
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PutStringConst14x14_7x14
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PutString7x14
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer_50ms
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[121]"></a>ResetM5311</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, m5311.o(i.ResetM5311))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ResetM5311 &rArr; M5311_RST_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_RST_Init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ctr_M5311_RST
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_FailurePowerOn
</UL>

<P><STRONG><a name="[153]"></a>SI24R1_Init</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, si24r1.o(i.SI24R1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SI24R1_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Si24r1_Data
</UL>

<P><STRONG><a name="[154]"></a>SI24R1_RX_Mode</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, si24r1.o(i.SI24R1_RX_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SI24R1_RX_Mode &rArr; SI24R1_Write_Buf &rArr; SPI_RW
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI24R1_Write_Reg
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI24R1_Write_Buf
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Si24r1_Data
</UL>

<P><STRONG><a name="[161]"></a>SI24R1_Read_Buf</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, si24r1.o(i.SI24R1_Read_Buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SI24R1_Read_Buf &rArr; SPI_RW
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RW
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI24R1_RxPacket
</UL>

<P><STRONG><a name="[163]"></a>SI24R1_Read_Reg</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, si24r1.o(i.SI24R1_Read_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SI24R1_Read_Reg &rArr; SPI_RW
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RW
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI24R1_TxPacket
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI24R1_RxPacket
</UL>

<P><STRONG><a name="[155]"></a>SI24R1_RxPacket</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, si24r1.o(i.SI24R1_RxPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SI24R1_RxPacket &rArr; SI24R1_Read_Buf &rArr; SPI_RW
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI24R1_Write_Reg
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI24R1_Read_Reg
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI24R1_Read_Buf
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Si24r1_Data
</UL>

<P><STRONG><a name="[15e]"></a>SI24R1_Standby_Mode</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, si24r1.o(i.SI24R1_Standby_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SI24R1_Standby_Mode
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Si24r1_Data
</UL>

<P><STRONG><a name="[156]"></a>SI24R1_TX_Mode</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, si24r1.o(i.SI24R1_TX_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SI24R1_TX_Mode &rArr; SI24R1_Write_Buf &rArr; SPI_RW
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI24R1_Write_Reg
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI24R1_Write_Buf
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Si24r1_Data
</UL>

<P><STRONG><a name="[15d]"></a>SI24R1_TxPacket</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, si24r1.o(i.SI24R1_TxPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SI24R1_TxPacket &rArr; SI24R1_Write_Buf &rArr; SPI_RW
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI24R1_Write_Reg
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI24R1_Write_Buf
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI24R1_Read_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Si24r1_Data
</UL>

<P><STRONG><a name="[15f]"></a>SI24R1_Write_Buf</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, si24r1.o(i.SI24R1_Write_Buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SI24R1_Write_Buf &rArr; SPI_RW
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RW
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI24R1_TxPacket
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI24R1_TX_Mode
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI24R1_RX_Mode
</UL>

<P><STRONG><a name="[160]"></a>SI24R1_Write_Reg</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, si24r1.o(i.SI24R1_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SI24R1_Write_Reg &rArr; SPI_RW
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RW
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI24R1_TxPacket
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI24R1_TX_Mode
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI24R1_RxPacket
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI24R1_RX_Mode
</UL>

<P><STRONG><a name="[13b]"></a>SPI1_Init</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, led_drive.o(i.SPI1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SPI1_Init &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
</UL>

<P><STRONG><a name="[13c]"></a>SPI1_ReadWriteByte</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, led_drive.o(i.SPI1_ReadWriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
</UL>

<P><STRONG><a name="[139]"></a>SPI_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_spi.o(i.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Disable
</UL>

<P><STRONG><a name="[138]"></a>SPI_I2S_DeInit</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, stm32l1xx_spi.o(i.SPI_I2S_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_I2S_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Disable
</UL>

<P><STRONG><a name="[165]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_spi.o(i.SPI_I2S_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>

<P><STRONG><a name="[167]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_spi.o(i.SPI_I2S_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>

<P><STRONG><a name="[166]"></a>SPI_I2S_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l1xx_spi.o(i.SPI_I2S_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>

<P><STRONG><a name="[164]"></a>SPI_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32l1xx_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
</UL>

<P><STRONG><a name="[10b]"></a>SYSCFG_EXTILineConfig</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, stm32l1xx_syscfg.o(i.SYSCFG_EXTILineConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SYSCFG_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_BS8116A_GPIO
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP112_INIT
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OPT3001_INIT
</UL>

<P><STRONG><a name="[62]"></a>Server_Inf_Set</STRONG> (Thumb, 1176 bytes, Stack size 112 bytes, menu.o(i.Server_Inf_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = Server_Inf_Set &rArr; GUI_PutStringConst14x14_7x14 &rArr; GUI_PutHZ14x14 &rArr; Display_PIC &rArr; set_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Update
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_HLine
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PutStringConst14x14_7x14
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PutString7x14
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Save_Para_Encode
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer_50ms
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[61]"></a>Server_Inf_Show</STRONG> (Thumb, 242 bytes, Stack size 88 bytes, menu.o(i.Server_Inf_Show))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = Server_Inf_Show &rArr; GUI_PutStringConst14x14_7x14 &rArr; GUI_PutHZ14x14 &rArr; Display_PIC &rArr; set_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Update
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PutStringConst14x14_7x14
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PutString7x14
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer_50ms
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[e0]"></a>Set_BTDE_Power</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, drive.o(i.Set_BTDE_Power))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Set_BTDE_Power &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_Send_alarm
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_Send_Inf
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_InitPowerOn
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_M5311Inf
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_RfReadSensor
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[67]"></a>Set_Interval</STRONG> (Thumb, 560 bytes, Stack size 72 bytes, menu.o(i.Set_Interval))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Set_Interval &rArr; GUI_PutStringConst14x14_7x14 &rArr; GUI_PutHZ14x14 &rArr; Display_PIC &rArr; set_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Update
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_HLine
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_TxtLength14x14
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PutStringConst14x14_7x14
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PutString7x14
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Save_Para_Encode
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer_50ms
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[16a]"></a>Set_LCD_Power</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, drive.o(i.Set_LCD_Power))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Set_LCD_Power &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_main
</UL>

<P><STRONG><a name="[e1]"></a>Set_M5311_Power</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, m5311.o(i.Set_M5311_Power))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Set_M5311_Power &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_InitPowerOn
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_M5311Inf
</UL>

<P><STRONG><a name="[134]"></a>Set_M5311_WakeIn_Gpio</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, m5311.o(i.Set_M5311_WakeIn_Gpio))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Set_M5311_WakeIn_Gpio &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_WakeUp_FromPSM
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_WakeUpPowerOn
</UL>

<P><STRONG><a name="[53]"></a>Set_Move_Mode_Number</STRONG> (Thumb, 970 bytes, Stack size 120 bytes, menu.o(i.Set_Move_Mode_Number))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = Set_Move_Mode_Number &rArr; GUI_PutStringConst14x14_7x14 &rArr; GUI_PutHZ14x14 &rArr; Display_PIC &rArr; set_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Update
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_HLine
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PutStringConst14x14_7x14
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PutString7x14
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Save_Para_Encode
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer_50ms
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[65]"></a>Set_Number</STRONG> (Thumb, 558 bytes, Stack size 80 bytes, menu.o(i.Set_Number))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = Set_Number &rArr; GUI_PutStringConst14x14_7x14 &rArr; GUI_PutHZ14x14 &rArr; Display_PIC &rArr; set_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Update
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_HLine
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_TxtLength14x14
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PutStringConst14x14_7x14
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PutString7x14
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Save_Para_Encode
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer_50ms
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[64]"></a>Set_RFChannelForLinkMove</STRONG> (Thumb, 414 bytes, Stack size 88 bytes, menu.o(i.Set_RFChannelForLinkMove))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = Set_RFChannelForLinkMove &rArr; GUI_PutStringConst14x14_7x14 &rArr; GUI_PutHZ14x14 &rArr; Display_PIC &rArr; set_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Update
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PutStringConst14x14_7x14
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PutString7x14
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Si24r1_Data
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer_50ms
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[63]"></a>Set_RFChannelForLinkTemp</STRONG> (Thumb, 398 bytes, Stack size 96 bytes, menu.o(i.Set_RFChannelForLinkTemp))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = Set_RFChannelForLinkTemp &rArr; GUI_PutStringConst14x14_7x14 &rArr; GUI_PutHZ14x14 &rArr; Display_PIC &rArr; set_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Update
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PutStringConst14x14_7x14
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PutString7x14
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Si24r1_Data
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer_50ms
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[68]"></a>Set_Sample_Interval</STRONG> (Thumb, 560 bytes, Stack size 72 bytes, menu.o(i.Set_Sample_Interval))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Set_Sample_Interval &rArr; GUI_PutStringConst14x14_7x14 &rArr; GUI_PutHZ14x14 &rArr; Display_PIC &rArr; set_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Update
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_HLine
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_TxtLength14x14
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PutStringConst14x14_7x14
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PutString7x14
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Save_Para_Encode
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer_50ms
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[6b]"></a>Set_Sensitivity</STRONG> (Thumb, 380 bytes, Stack size 72 bytes, menu.o(i.Set_Sensitivity))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Set_Sensitivity &rArr; GUI_PutStringConst14x14_7x14 &rArr; GUI_PutHZ14x14 &rArr; Display_PIC &rArr; set_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Update
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_HLine
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_TxtLength14x14
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PutStringConst14x14_7x14
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PutString7x14
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Save_Para_Encode
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer_50ms
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[59]"></a>Set_Smoke_Mode_Number</STRONG> (Thumb, 974 bytes, Stack size 120 bytes, menu.o(i.Set_Smoke_Mode_Number))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = Set_Smoke_Mode_Number &rArr; GUI_PutStringConst14x14_7x14 &rArr; GUI_PutHZ14x14 &rArr; Display_PIC &rArr; set_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Update
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_HLine
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PutStringConst14x14_7x14
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PutString7x14
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Save_Para_Encode
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer_50ms
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[5e]"></a>Set_T_Interval</STRONG> (Thumb, 560 bytes, Stack size 72 bytes, menu.o(i.Set_T_Interval))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Set_T_Interval &rArr; GUI_PutStringConst14x14_7x14 &rArr; GUI_PutHZ14x14 &rArr; Display_PIC &rArr; set_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Update
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_HLine
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_TxtLength14x14
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PutStringConst14x14_7x14
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PutString7x14
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Save_Para_Encode
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer_50ms
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[50]"></a>Set_Temp_Mode_Number</STRONG> (Thumb, 970 bytes, Stack size 120 bytes, menu.o(i.Set_Temp_Mode_Number))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = Set_Temp_Mode_Number &rArr; GUI_PutStringConst14x14_7x14 &rArr; GUI_PutHZ14x14 &rArr; Display_PIC &rArr; set_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Update
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_HLine
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PutStringConst14x14_7x14
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PutString7x14
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Save_Para_Encode
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer_50ms
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[4b]"></a>Set_TestNum</STRONG> (Thumb, 564 bytes, Stack size 72 bytes, menu.o(i.Set_TestNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Set_TestNum &rArr; GUI_PutStringConst14x14_7x14 &rArr; GUI_PutHZ14x14 &rArr; Display_PIC &rArr; set_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Update
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_HLine
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_TxtLength14x14
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PutStringConst14x14_7x14
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PutString7x14
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer_50ms
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[56]"></a>Set_Water_Mode_Number</STRONG> (Thumb, 972 bytes, Stack size 120 bytes, menu.o(i.Set_Water_Mode_Number))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = Set_Water_Mode_Number &rArr; GUI_PutStringConst14x14_7x14 &rArr; GUI_PutHZ14x14 &rArr; Display_PIC &rArr; set_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Update
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_HLine
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PutStringConst14x14_7x14
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PutString7x14
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Save_Para_Encode
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer_50ms
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[6c]"></a>ShowVersion</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, menu.o(i.ShowVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = ShowVersion &rArr; GUI_PutStringConst14x14_7x14 &rArr; GUI_PutHZ14x14 &rArr; Display_PIC &rArr; set_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Update
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PutStringConst14x14_7x14
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer_50ms
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[16e]"></a>SleepInit_GPIO</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, main.o(i.SleepInit_GPIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SleepInit_GPIO &rArr; Clr_LCD_Power &rArr; I2C_Set_Input &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_BTDE_Power
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ctr_M5311_RST
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_M5311_Power
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_IO_Set_Input
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Set_Input
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_LCD_Power
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_HBZ_Power
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_Buzzer_Power
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC2500_GPIO_Set_Input
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IO_Set_Input
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_RfReadSensor
</UL>

<P><STRONG><a name="[3a]"></a>SystemInit</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, system_stm32l1xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_idle_demon
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(.text)
</UL>
<P><STRONG><a name="[69]"></a>System_Inf_State</STRONG> (Thumb, 486 bytes, Stack size 96 bytes, menu.o(i.System_Inf_State))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = System_Inf_State &rArr; GUI_PutStringConst14x14_7x14 &rArr; GUI_PutHZ14x14 &rArr; Display_PIC &rArr; set_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Update
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PutStringConst14x14_7x14
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PutString7x14
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Si24r1_Data
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer_50ms
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32l1xx_it.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM2_IRQHandler &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, drive.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM3_IRQHandler &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[129]"></a>TIM3_Int_Init</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, drive.o(i.TIM3_Int_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TIM3_Int_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_UDPSend_InfData
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_Send_Inf
</UL>

<P><STRONG><a name="[171]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_tim.o(i.TIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[174]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Int_Init
</UL>

<P><STRONG><a name="[170]"></a>TIM_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32l1xx_tim.o(i.TIM_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[173]"></a>TIM_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_tim.o(i.TIM_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Int_Init
</UL>

<P><STRONG><a name="[172]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, stm32l1xx_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Int_Init
</UL>

<P><STRONG><a name="[115]"></a>TMP112_INIT</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, tmp112.o(i.TMP112_INIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = TMP112_INIT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_TMP112
</UL>

<P><STRONG><a name="[4c]"></a>Test_Status</STRONG> (Thumb, 468 bytes, Stack size 104 bytes, menu.o(i.Test_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 1804<LI>Call Chain = Test_Status &rArr; M5311_Send_Inf &rArr; M5311_UDPSend_InfData &rArr; send_UDP_msg &rArr; M5311_send_cmd &rArr; M5311_check_ack &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_Send_Inf
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Update
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PutStringConst14x14_7x14
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer_50ms
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buddleSort
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[116]"></a>Tmp112_WriteConfig</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, tmp112.o(i.Tmp112_WriteConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Tmp112_WriteConfig &rArr; I2C_SendByte &rArr; I2C_WaitAck &rArr; I2C_Set_SDA_Output &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_TMP112
</UL>

<P><STRONG><a name="[176]"></a>Tmp211_ReadReg</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, tmp112.o(i.Tmp211_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = Tmp211_ReadReg &rArr; I2C_SendByte &rArr; I2C_WaitAck &rArr; I2C_Set_SDA_Output &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_delay
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendByte
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[177]"></a>Tmp211_WriteLimReg</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, tmp112.o(i.Tmp211_WriteLimReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = Tmp211_WriteLimReg &rArr; I2C_SendByte &rArr; I2C_WaitAck &rArr; I2C_Set_SDA_Output &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendByte
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e4]"></a>USART2_Close</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usart.o(i.USART2_Close))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART2_Close &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_Send_alarm
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_Send_Inf
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_InitPowerOn
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_M5311Inf
</UL>

<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32l1xx_it.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART2_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32l1xx_it.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART3_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[17a]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32l1xx_usart.o(i.USART_ClearITPendingBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[11c]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_Close
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_USART2
</UL>

<P><STRONG><a name="[1c0]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l1xx_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_send_str
</UL>

<P><STRONG><a name="[178]"></a>USART_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32l1xx_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[11b]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32l1xx_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_USART2
</UL>

<P><STRONG><a name="[119]"></a>USART_Init</STRONG> (Thumb, 198 bytes, Stack size 48 bytes, stm32l1xx_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_USART2
</UL>

<P><STRONG><a name="[179]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l1xx_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[1c1]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l1xx_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_send_str
</UL>

<P><STRONG><a name="[6d]"></a>UpLoadApp</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, menu.o(i.UpLoadApp))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = UpLoadApp &rArr; GUI_PutStringConst14x14_7x14 &rArr; GUI_PutHZ14x14 &rArr; Display_PIC &rArr; set_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Update
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PutStringConst14x14_7x14
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GotoUploadApp
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer_50ms
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l1xx_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[17d]"></a>Variable_Flash</STRONG> (Thumb, 1380 bytes, Stack size 64 bytes, data.o(i.Variable_Flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Variable_Flash &rArr; FLASH_Save_Para_Encode &rArr; DATA_EEPROM_ProgramByte &rArr; DATA_EEPROM_FastProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Save_Para_Encode
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Get_Para_Decode
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[181]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1d5]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[cc]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_UDP_msg
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;creat_UDP_socket
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_socket
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_send_cmd
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_UDPSend_InfData_ALARM
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_UDPSend_InfData
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_UDPSend_ALARMData
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Main_View
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpLoadApp
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Status
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Inf_State
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowVersion
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Water_Mode_Number
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_TestNum
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Temp_Mode_Number
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_T_Interval
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Smoke_Mode_Number
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Sensitivity
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Sample_Interval
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_RFChannelForLinkTemp
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_RFChannelForLinkMove
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Number
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Move_Mode_Number
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Interval
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Server_Inf_Show
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Server_Inf_Set
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Water_Mode_Number
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Temp_Mode_Number
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Smoke_Mode_Number
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Move_Mode_Number
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Query_online_device
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NB_Status
</UL>

<P><STRONG><a name="[1d6]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[1d7]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[183]"></a>__kernel_poly</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[184]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[185]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_infnan &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[187]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[1d8]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1d9]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1da]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[18f]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[1b7]"></a>_init_box</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, rt_membox.o(i._init_box))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _init_box
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[175]"></a>buddleSort</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, menu.o(i.buddleSort))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = buddleSort
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Status
</UL>

<P><STRONG><a name="[128]"></a>close_socket</STRONG> (Thumb, 46 bytes, Stack size 72 bytes, m5311.o(i.close_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 620<LI>Call Chain = close_socket &rArr; M5311_send_cmd &rArr; M5311_check_ack &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_send_cmd
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_Send_alarm
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_Send_Inf
</UL>

<P><STRONG><a name="[12c]"></a>creat_UDP_socket</STRONG> (Thumb, 54 bytes, Stack size 88 bytes, m5311.o(i.creat_UDP_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 636<LI>Call Chain = creat_UDP_socket &rArr; M5311_send_cmd &rArr; M5311_check_ack &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_send_cmd
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_UDPSend_InfData
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_UDPSend_ALARMData
</UL>

<P><STRONG><a name="[1b6]"></a>dbg_init</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, hal_cm3.o(i.dbg_init))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[1bd]"></a>dbg_task_notify</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, hal_cm3.o(i.dbg_task_notify))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
</UL>

<P><STRONG><a name="[1b5]"></a>dbg_task_switch</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hal_cm3.o(i.dbg_task_switch))
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
</UL>

<P><STRONG><a name="[ab]"></a>delay_ms</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, drive.o(i.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_WakeUp_FromPSM
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_WakeUpPowerOn
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Si24r1_Data
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_main
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_RfReadSensor
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Vref
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Battery
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer_50ms
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep50ms_Time
</UL>

<P><STRONG><a name="[d5]"></a>isr_evt_set</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, rt_event.o(i.isr_evt_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = isr_evt_set &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psq_enq
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psh_req
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[142]"></a>log</STRONG> (Thumb, 808 bytes, Stack size 96 bytes, log.o(i.log))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Opt3001_WriteLimReg
</UL>

<P><STRONG><a name="[37]"></a>main</STRONG> (Thumb, 234 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = main &rArr; Opt3001_WriteLimReg &rArr; log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBGMCU_Config
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_BTDE_Power
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_BTDE_Power
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_set_env
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opt3001_manufacturer_id
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opt3001_limUp
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opt3001_limDown
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opt3001_device_id
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opt3001_REG
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Variable_Flash
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tmp211_WriteLimReg
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tmp211_ReadReg
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Opt3001_WriteLimReg
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OPT3001_GetLuxValue
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_OPT3001
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTmp112Value
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_TMP112
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeriphClock_Initialize
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Unused_GPIO
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_GPIO
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Set_Input
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Vref
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Battery
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[194]"></a>opt3001_REG</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, opt3001.o(i.opt3001_REG))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = opt3001_REG &rArr; OPT3001_read &rArr; I2C_SendByte &rArr; I2C_WaitAck &rArr; I2C_Set_SDA_Output &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OPT3001_read
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[193]"></a>opt3001_device_id</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, opt3001.o(i.opt3001_device_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = opt3001_device_id &rArr; OPT3001_read &rArr; I2C_SendByte &rArr; I2C_WaitAck &rArr; I2C_Set_SDA_Output &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OPT3001_read
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[196]"></a>opt3001_limDown</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, opt3001.o(i.opt3001_limDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = opt3001_limDown &rArr; OPT3001_read &rArr; I2C_SendByte &rArr; I2C_WaitAck &rArr; I2C_Set_SDA_Output &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OPT3001_read
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[195]"></a>opt3001_limUp</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, opt3001.o(i.opt3001_limUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = opt3001_limUp &rArr; OPT3001_read &rArr; I2C_SendByte &rArr; I2C_WaitAck &rArr; I2C_Set_SDA_Output &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OPT3001_read
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[192]"></a>opt3001_manufacturer_id</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, opt3001.o(i.opt3001_manufacturer_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = opt3001_manufacturer_id &rArr; OPT3001_read &rArr; I2C_SendByte &rArr; I2C_WaitAck &rArr; I2C_Set_SDA_Output &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OPT3001_read
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b0]"></a>os_error</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtx_conf_cm.o(i.os_error))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psq_enq
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check
</UL>

<P><STRONG><a name="[44]"></a>os_idle_demon</STRONG> (Thumb, 356 bytes, Stack size 32 bytes, rtx_conf_cm.o(i.os_idle_demon))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = os_idle_demon &rArr; RTC_SetTime &rArr; RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WakeUpCmd
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WakeUpClockConfig
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetWakeUpCounter
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ITConfig
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKConfig
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKCmd
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_LSICmd
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_RTCAccessCmd
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_GetFlagStatus
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_EnterSTOPMode
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_ClearFlag
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_task.o(i.rt_sys_init)
</UL>
<P><STRONG><a name="[1ba]"></a>os_tick_init</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rt_system.o(i.os_tick_init))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[74]"></a>os_tick_irqack</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rt_system.o(i.os_tick_irqack), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Handler
</UL>

<P><STRONG><a name="[1bc]"></a>os_tmr_call</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_conf_cm.o(i.os_tmr_call))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tmr_tick
</UL>

<P><STRONG><a name="[38]"></a>rt_alloc_box</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_membox.o(i.rt_alloc_box))
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_cm3.o(.emb_text)
</UL>
<P><STRONG><a name="[1a3]"></a>rt_block</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, rt_task.o(i.rt_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_dly
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dly_wait
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_wait
</UL>

<P><STRONG><a name="[1bb]"></a>rt_chk_robin</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_conf_cm.o(i.rt_chk_robin))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>

<P><STRONG><a name="[1a7]"></a>rt_dec_dly</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, rt_list.o(i.rt_dec_dly))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rt_dec_dly &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resume
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>

<P><STRONG><a name="[1a9]"></a>rt_dispatch</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, rt_task.o(i.rt_dispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_rdy_first
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_set
</UL>

<P><STRONG><a name="[3e]"></a>rt_dly_wait</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rt_time.o(i.rt_dly_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_dly_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>
<BR>[Address Reference Count : 19]<UL><LI> m5311.o(i.Get_M5311Inf)
<LI> main.o(i.task_Net)
<LI> led_drive.o(i.OLED_Init)
<LI> m5311.o(i.M5311_FailurePowerOn)
<LI> m5311.o(i.M5311_InitNetWork)
<LI> m5311.o(i.M5311_InitPowerOn)
<LI> m5311.o(i.M5311_PowerOn)
<LI> m5311.o(i.M5311_UDPSend_ALARMData)
<LI> m5311.o(i.M5311_UDPSend_InfData)
<LI> m5311.o(i.M5311_UDPSend_InfData_ALARM)
<LI> m5311.o(i.M5311_WakeUpPowerOn)
<LI> m5311.o(i.M5311_send_cmd)
<LI> m5311.o(i.ResetM5311)
<LI> m5311.o(i.Set_M5311_Power)
<LI> main.o(i.task_RfReadSensor)
<LI> menu.o(i.Set_Number)
<LI> menu.o(i.Set_RFChannelForLinkMove)
<LI> menu.o(i.Set_RFChannelForLinkTemp)
<LI> menu.o(i.System_Inf_State)
</UL>
<P><STRONG><a name="[3d]"></a>rt_evt_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_event.o(i.rt_evt_get))
<BR>[Address Reference Count : 33]<UL><LI> main.o(i.task_Net)
<LI> display.o(i.Display_Main_View)
<LI> fp_menu.o(i.Show_Menu_List)
<LI> menu.o(i.Del_Move_Mode_Number)
<LI> menu.o(i.Del_Smoke_Mode_Number)
<LI> menu.o(i.Del_Temp_Mode_Number)
<LI> menu.o(i.Del_Water_Mode_Number)
<LI> menu.o(i.NB_Status)
<LI> main.o(i.task_main)
<LI> menu.o(i.Clear_Alarm_Inf)
<LI> menu.o(i.Query_online_device)
<LI> menu.o(i.Read_Move_Mode_Number)
<LI> menu.o(i.Read_Smoke_Mode_Number)
<LI> menu.o(i.Read_Temp_Mode_Number)
<LI> menu.o(i.Read_Water_Mode_Number)
<LI> menu.o(i.Server_Inf_Set)
<LI> menu.o(i.Server_Inf_Show)
<LI> menu.o(i.Set_Interval)
<LI> menu.o(i.Set_Move_Mode_Number)
<LI> menu.o(i.Set_Number)
<LI> menu.o(i.Set_RFChannelForLinkMove)
<LI> menu.o(i.Set_RFChannelForLinkTemp)
<LI> menu.o(i.Set_Sample_Interval)
<LI> menu.o(i.Set_Sensitivity)
<LI> menu.o(i.Set_Smoke_Mode_Number)
<LI> menu.o(i.Set_T_Interval)
<LI> menu.o(i.Set_Temp_Mode_Number)
<LI> menu.o(i.Set_TestNum)
<LI> menu.o(i.Set_Water_Mode_Number)
<LI> menu.o(i.ShowVersion)
<LI> menu.o(i.System_Inf_State)
<LI> menu.o(i.Test_Status)
<LI> menu.o(i.UpLoadApp)
</UL>
<P><STRONG><a name="[1ab]"></a>rt_evt_psh</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, rt_event.o(i.rt_evt_psh))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_evt_psh &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[45]"></a>rt_evt_set</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, rt_event.o(i.rt_evt_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = rt_evt_set &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.task_RfReadSensor)
</UL>
<P><STRONG><a name="[3c]"></a>rt_evt_wait</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, rt_event.o(i.rt_evt_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_evt_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>
<BR>[Address Reference Count : 33]<UL><LI> main.o(i.task_Net)
<LI> display.o(i.Display_Main_View)
<LI> fp_menu.o(i.Show_Menu_List)
<LI> menu.o(i.Del_Move_Mode_Number)
<LI> menu.o(i.Del_Smoke_Mode_Number)
<LI> menu.o(i.Del_Temp_Mode_Number)
<LI> menu.o(i.Del_Water_Mode_Number)
<LI> menu.o(i.NB_Status)
<LI> main.o(i.task_main)
<LI> menu.o(i.Clear_Alarm_Inf)
<LI> menu.o(i.Query_online_device)
<LI> menu.o(i.Read_Move_Mode_Number)
<LI> menu.o(i.Read_Smoke_Mode_Number)
<LI> menu.o(i.Read_Temp_Mode_Number)
<LI> menu.o(i.Read_Water_Mode_Number)
<LI> menu.o(i.Server_Inf_Set)
<LI> menu.o(i.Server_Inf_Show)
<LI> menu.o(i.Set_Interval)
<LI> menu.o(i.Set_Move_Mode_Number)
<LI> menu.o(i.Set_Number)
<LI> menu.o(i.Set_RFChannelForLinkMove)
<LI> menu.o(i.Set_RFChannelForLinkTemp)
<LI> menu.o(i.Set_Sample_Interval)
<LI> menu.o(i.Set_Sensitivity)
<LI> menu.o(i.Set_Smoke_Mode_Number)
<LI> menu.o(i.Set_T_Interval)
<LI> menu.o(i.Set_Temp_Mode_Number)
<LI> menu.o(i.Set_TestNum)
<LI> menu.o(i.Set_Water_Mode_Number)
<LI> menu.o(i.ShowVersion)
<LI> menu.o(i.System_Inf_State)
<LI> menu.o(i.Test_Status)
<LI> menu.o(i.UpLoadApp)
</UL>
<P><STRONG><a name="[39]"></a>rt_free_box</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rt_membox.o(i.rt_free_box))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tmr_tick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_cm3.o(.emb_text)
</UL>
<P><STRONG><a name="[1a5]"></a>rt_get_first</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rt_list.o(i.rt_get_first))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resume
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>

<P><STRONG><a name="[1b9]"></a>rt_init_robin</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_conf_cm.o(i.rt_init_robin))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[1ae]"></a>rt_init_stack</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, hal_cm3.o(i.rt_init_stack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_init_stack
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
</UL>

<P><STRONG><a name="[1af]"></a>rt_mbx_psh</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, rt_mailbox.o(i.rt_mbx_psh))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = rt_mbx_psh &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[71]"></a>rt_pop_req</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, rt_system.o(i.rt_pop_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = rt_pop_req &rArr; rt_mbx_psh &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_rdy_first
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[18e]"></a>rt_psh_req</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rt_system.o(i.rt_psh_req))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_evt_set
</UL>

<P><STRONG><a name="[18d]"></a>rt_psq_enq</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, rt_list.o(i.rt_psq_enq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_evt_set
</UL>

<P><STRONG><a name="[1a4]"></a>rt_put_dly</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, rt_list.o(i.rt_put_dly))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_put_dly
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>

<P><STRONG><a name="[1a8]"></a>rt_put_prio</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, rt_list.o(i.rt_put_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dec_dly
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>

<P><STRONG><a name="[1aa]"></a>rt_put_rdy_first</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rt_list.o(i.rt_put_rdy_first))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resume
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>

<P><STRONG><a name="[43]"></a>rt_resume</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, rt_system.o(i.rt_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = rt_resume &rArr; rt_dec_dly &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tmr_tick
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dec_dly
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_unlock
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_rdy_first
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_conf_cm.o(i.os_idle_demon)
</UL>
<P><STRONG><a name="[1ac]"></a>rt_rmv_dly</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rt_list.o(i.rt_rmv_dly))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_rmv_dly
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_set
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
</UL>

<P><STRONG><a name="[1bf]"></a>rt_rmv_list</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, rt_list.o(i.rt_rmv_list))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
</UL>

<P><STRONG><a name="[1b1]"></a>rt_sem_psh</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, rt_semaphore.o(i.rt_sem_psh))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_sem_psh &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[70]"></a>rt_stk_check</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rt_system.o(i.rt_stk_check))
<BR><BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>

<P><STRONG><a name="[42]"></a>rt_suspend</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, rt_system.o(i.rt_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_suspend &rArr; rt_tsk_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_lock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_conf_cm.o(i.os_idle_demon)
</UL>
<P><STRONG><a name="[1a6]"></a>rt_switch_req</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_task.o(i.rt_switch_req))
<BR><BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_task_switch
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resume
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>

<P><STRONG><a name="[41]"></a>rt_sys_init</STRONG> (Thumb, 268 bytes, Stack size 32 bytes, rt_task.o(i.rt_sys_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = rt_sys_init &rArr; rt_tsk_create &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_robin
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_PSP
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_init
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_init
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_box
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[72]"></a>rt_systick</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, rt_system.o(i.rt_systick))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = rt_systick &rArr; rt_dec_dly &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_chk_robin
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tmr_tick
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dec_dly
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_rdy_first
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Handler
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[1b2]"></a>rt_tmr_tick</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, rt_timer.o(i.rt_tmr_tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_tmr_tick
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tmr_call
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free_box
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resume
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>

<P><STRONG><a name="[47]"></a>rt_tsk_create</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, rt_task.o(i.rt_tsk_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = rt_tsk_create &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_task_notify
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.task_initial)
</UL>
<P><STRONG><a name="[4a]"></a>rt_tsk_delete</STRONG> (Thumb, 336 bytes, Stack size 40 bytes, rt_task.o(i.rt_tsk_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = rt_tsk_delete &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_list
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_PSP
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free_box
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_task_notify
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.task_initial)
</UL>
<P><STRONG><a name="[1b4]"></a>rt_tsk_lock</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, rt_system.o(i.rt_tsk_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_tsk_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_suspend
</UL>

<P><STRONG><a name="[1b3]"></a>rt_tsk_unlock</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, rt_system.o(i.rt_tsk_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_tsk_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resume
</UL>

<P><STRONG><a name="[12f]"></a>send_UDP_msg</STRONG> (Thumb, 74 bytes, Stack size 536 bytes, m5311.o(i.send_UDP_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 1084<LI>Call Chain = send_UDP_msg &rArr; M5311_send_cmd &rArr; M5311_check_ack &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_send_cmd
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_UDPSend_InfData_ALARM
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_UDPSend_InfData
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_UDPSend_ALARMData
</UL>

<P><STRONG><a name="[48]"></a>task_Net</STRONG> (Thumb, 286 bytes, Stack size 0 bytes, main.o(i.task_Net))
<BR><BR>[Stack]<UL><LI>Max Depth = 2292<LI>Call Chain = task_Net &rArr; M5311_Send_alarm &rArr; M5311_UDPSend_ALARMData &rArr; M5311_UDPSend_InfData_ALARM &rArr; send_UDP_msg &rArr; M5311_send_cmd &rArr; M5311_check_ack &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_Send_alarm
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_Send_Inf
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_InitPowerOn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.task_initial)
</UL>
<P><STRONG><a name="[46]"></a>task_RfReadSensor</STRONG> (Thumb, 870 bytes, Stack size 8 bytes, main.o(i.task_RfReadSensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = task_RfReadSensor &rArr; Get_Vref &rArr; ADC1_Init &rArr; ADC_RegularChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_BTDE_Power
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_BTDE_Power
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Si24r1_Data
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OPT3001_GetLuxValue
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SleepInit_GPIO
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTmp112Value
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Set_Input
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Vref
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Battery
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer_50ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.task_initial)
</UL>
<P><STRONG><a name="[40]"></a>task_initial</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, main.o(i.task_initial))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[49]"></a>task_main</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, main.o(i.task_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = task_main &rArr; Display_Main_View &rArr; Enter_Main_Menu &rArr; Show_Menu_List &rArr;  Show_Menu_List (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Disable
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Update
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_BS8116A
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BS8116A_GPIO_Set_Input
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Main_View
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LCD_Power
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_LCD_Power
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep50ms_Time
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.task_initial)
</UL>
<P><STRONG><a name="[135]"></a>usart_send_str</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, usart.o(i.usart_send_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usart_send_str
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M5311_send_cmd
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[16f]"></a>SetSysClock</STRONG> (Thumb, 258 bytes, Stack size 12 bytes, system_stm32l1xx.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[14d]"></a>RTC_Bcd2ToByte</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l1xx_rtc.o(i.RTC_Bcd2ToByte))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
</UL>

<P><STRONG><a name="[14e]"></a>RTC_ByteToBcd2</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32l1xx_rtc.o(i.RTC_ByteToBcd2))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
</UL>

<P><STRONG><a name="[ef]"></a>I2C2_ReceiveByte</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, key.o(i.I2C2_ReceiveByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = I2C2_ReceiveByte &rArr; I2C2_Set_SDA_Output &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_delay
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Set_SDA_Output
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Set_SDA_Input
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBS8116A
</UL>

<P><STRONG><a name="[f3]"></a>I2C2_SendByte</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, key.o(i.I2C2_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = I2C2_SendByte &rArr; I2C2_WaitAck &rArr; I2C2_Set_SDA_Output &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_delay
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_WaitAck
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBS8116A
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_BS8116A
</UL>

<P><STRONG><a name="[f0]"></a>I2C2_Set_SDA_Input</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, key.o(i.I2C2_Set_SDA_Input))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = I2C2_Set_SDA_Input &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_WaitAck
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_ReceiveByte
</UL>

<P><STRONG><a name="[f2]"></a>I2C2_Set_SDA_Output</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, key.o(i.I2C2_Set_SDA_Output))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = I2C2_Set_SDA_Output &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_WaitAck
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Start
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_ReceiveByte
</UL>

<P><STRONG><a name="[f5]"></a>I2C2_Start</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, key.o(i.I2C2_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = I2C2_Start &rArr; I2C2_Set_SDA_Output &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_delay
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Set_SDA_Output
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBS8116A
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_BS8116A
</UL>

<P><STRONG><a name="[f6]"></a>I2C2_Stop</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, key.o(i.I2C2_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C2_Stop &rArr; I2C2_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBS8116A
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_BS8116A
</UL>

<P><STRONG><a name="[f4]"></a>I2C2_WaitAck</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, key.o(i.I2C2_WaitAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = I2C2_WaitAck &rArr; I2C2_Set_SDA_Output &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_delay
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Set_SDA_Output
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Set_SDA_Input
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_SendByte
</UL>

<P><STRONG><a name="[f1]"></a>I2C2_delay</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, key.o(i.I2C2_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C2_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_WaitAck
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Stop
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Start
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_SendByte
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_ReceiveByte
</UL>

<P><STRONG><a name="[c7]"></a>set_pixel</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, led_drive.o(i.set_pixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = set_pixel
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_PIC
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_VLine
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_HLine
</UL>

<P><STRONG><a name="[16c]"></a>Get_Item_Enable_Index</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, fp_menu.o(i.Get_Item_Enable_Index))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Get_Item_Enable_Index
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Menu_List
</UL>

<P><STRONG><a name="[16b]"></a>Get_Item_Enable_Number</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, fp_menu.o(i.Get_Item_Enable_Number))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Get_Item_Enable_Number
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Menu_List
</UL>

<P><STRONG><a name="[d6]"></a>Show_Menu_List</STRONG> (Thumb, 770 bytes, Stack size 104 bytes, fp_menu.o(i.Show_Menu_List))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + In Cycle
<LI>Call Chain = Show_Menu_List &rArr;  Show_Menu_List (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_PIC
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Update
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PutStringConst14x14_7x14
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PutString14x14
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ItemNum2Str
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Menu_List
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Item_Enable_Number
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Item_Enable_Index
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer_50ms
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Menu_List
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_Main_Menu
</UL>

<P><STRONG><a name="[162]"></a>SPI_RW</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, si24r1.o(i.SPI_RW))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_RW
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI24R1_Write_Reg
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI24R1_Write_Buf
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI24R1_Read_Reg
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI24R1_Read_Buf
</UL>

<P><STRONG><a name="[f7]"></a>I2C_ReadByte</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, opt3001.o(i.I2C_ReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = I2C_ReadByte &rArr; I2C_Set_SDA_Output &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_read
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_delay
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Set_SDA_Output
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Set_SDA_Input
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OPT3001_read
</UL>

<P><STRONG><a name="[101]"></a>I2C_SendByte</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, opt3001.o(i.I2C_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = I2C_SendByte &rArr; I2C_WaitAck &rArr; I2C_Set_SDA_Output &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_delay
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitAck
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OPT3001_read
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OPT3001_WriteReg
</UL>

<P><STRONG><a name="[f8]"></a>I2C_Set_SDA_Input</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, opt3001.o(i.I2C_Set_SDA_Input))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = I2C_Set_SDA_Input &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitAck
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadByte
</UL>

<P><STRONG><a name="[fb]"></a>I2C_Set_SDA_Output</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, opt3001.o(i.I2C_Set_SDA_Output))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = I2C_Set_SDA_Output &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitAck
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadByte
</UL>

<P><STRONG><a name="[105]"></a>I2C_Start</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, opt3001.o(i.I2C_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = I2C_Start &rArr; I2C_Set_SDA_Output &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_delay
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Set_SDA_Output
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OPT3001_read
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OPT3001_WriteReg
</UL>

<P><STRONG><a name="[107]"></a>I2C_Stop</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, opt3001.o(i.I2C_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_Stop &rArr; I2C_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OPT3001_read
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OPT3001_WriteReg
</UL>

<P><STRONG><a name="[102]"></a>I2C_WaitAck</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, opt3001.o(i.I2C_WaitAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = I2C_WaitAck &rArr; I2C_Set_SDA_Output &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_read
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_delay
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Set_SDA_Output
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Set_SDA_Input
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendByte
</UL>

<P><STRONG><a name="[f9]"></a>I2C_delay</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, opt3001.o(i.I2C_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitAck
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendByte
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadByte
</UL>

<P><STRONG><a name="[fa]"></a>SDA_read</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, opt3001.o(i.SDA_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDA_read
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitAck
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadByte
</UL>

<P><STRONG><a name="[fc]"></a>I2C_ReadByte</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, tmp112.o(i.I2C_ReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = I2C_ReadByte &rArr; I2C_Set_SDA_Output &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_read
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_delay
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Set_SDA_Output
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Set_SDA_Input
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tmp211_ReadReg
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTmp112Value
</UL>

<P><STRONG><a name="[103]"></a>I2C_SendByte</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, tmp112.o(i.I2C_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = I2C_SendByte &rArr; I2C_WaitAck &rArr; I2C_Set_SDA_Output &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_delay
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitAck
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Set_SDA_Output
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tmp211_WriteLimReg
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tmp211_ReadReg
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTmp112Value
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tmp112_WriteConfig
</UL>

<P><STRONG><a name="[fd]"></a>I2C_Set_SDA_Input</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, tmp112.o(i.I2C_Set_SDA_Input))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = I2C_Set_SDA_Input &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitAck
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadByte
</UL>

<P><STRONG><a name="[100]"></a>I2C_Set_SDA_Output</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, tmp112.o(i.I2C_Set_SDA_Output))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = I2C_Set_SDA_Output &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitAck
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendByte
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadByte
</UL>

<P><STRONG><a name="[106]"></a>I2C_Start</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, tmp112.o(i.I2C_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = I2C_Start &rArr; I2C_Set_SDA_Output &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_delay
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Set_SDA_Output
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tmp211_WriteLimReg
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tmp211_ReadReg
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTmp112Value
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tmp112_WriteConfig
</UL>

<P><STRONG><a name="[108]"></a>I2C_Stop</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, tmp112.o(i.I2C_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = I2C_Stop &rArr; I2C_Set_SDA_Output &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_delay
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Set_SDA_Output
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tmp211_WriteLimReg
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tmp211_ReadReg
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTmp112Value
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tmp112_WriteConfig
</UL>

<P><STRONG><a name="[104]"></a>I2C_WaitAck</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, tmp112.o(i.I2C_WaitAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = I2C_WaitAck &rArr; I2C_Set_SDA_Output &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_read
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_delay
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Set_SDA_Output
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Set_SDA_Input
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendByte
</UL>

<P><STRONG><a name="[fe]"></a>I2C_delay</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, tmp112.o(i.I2C_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tmp211_ReadReg
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitAck
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendByte
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadByte
</UL>

<P><STRONG><a name="[ff]"></a>SDA_read</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, tmp112.o(i.SDA_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDA_read
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitAck
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadByte
</UL>

<P><STRONG><a name="[1ad]"></a>rt_init_context</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, rt_task.o(i.rt_init_context))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_stack
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[188]"></a>_fp_digits</STRONG> (Thumb, 334 bytes, Stack size 56 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[182]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>

<P><STRONG><a name="[18b]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[18a]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[3f]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
